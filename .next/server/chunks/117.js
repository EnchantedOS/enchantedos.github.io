"use strict";exports.id=117,exports.ids=[117],exports.modules={117:(e,t,o)=>{var s;function r(e){return void 0===e||e}function i(e){let t=Array(e);for(let o=0;o<e;o++)t[o]=n();return t}function n(){return Object.create(null)}function a(e,t){return t.length-e.length}function h(e){return"string"==typeof e}function l(e){return"object"==typeof e}function u(e){return"function"==typeof e}function c(e,t){var o=d;if(e&&(t&&(e=p(e,t)),this.H&&(e=p(e,this.H)),this.J&&1<e.length&&(e=p(e,this.J)),o||""===o)){if(t=e.split(o),this.filter){e=this.filter,o=t.length;let s=[];for(let r=0,i=0;r<o;r++){let o=t[r];o&&!e[o]&&(s[i++]=o)}e=s}else e=t}return e}o.r(t),o.d(t,{search:()=>$});let d=/[\p{Z}\p{S}\p{P}\p{C}]+/u,f=/[\u0300-\u036f]/g;function g(e,t){let o=Object.keys(e),s=o.length,r=[],i="",n=0;for(let a=0,h,l;a<s;a++)(l=e[h=o[a]])?(r[n++]=m(t?"(?!\\b)"+h+"(\\b|_)":h),r[n++]=l):i+=(i?"|":"")+h;return i&&(r[n++]=m(t?"(?!\\b)("+i+")(\\b|_)":"("+i+")"),r[n]=""),r}function p(e,t){for(let o=0,s=t.length;o<s&&(e=e.replace(t[o],t[o+1]));o+=2);return e}function m(e){return RegExp(e,"g")}function y(e){let t="",o="";for(let s=0,r=e.length,i;s<r;s++)(i=e[s])!==o&&(t+=o=i);return t}function w(e){return c.call(this,(""+e).toLowerCase(),!1)}let b={},v={};function k(e){A(e,"add"),A(e,"append"),A(e,"search"),A(e,"update"),A(e,"remove")}function A(e,t){e[t+"Async"]=function(){let e;let o=this,s=arguments;var r=s[s.length-1];return u(r)&&(e=r,delete s[s.length-1]),r=new Promise(function(e){setTimeout(function(){o.async=!0;let r=o[t].apply(o,s);o.async=!1,e(r)})}),e?(r.then(e),this):r}}function P(e,t,o,s){let r=e.length,i=[],a,h,l=0;s&&(s=[]);for(let u=r-1;0<=u;u--){let c=e[u],d=c.length,f=n(),g=!a;for(let e=0;e<d;e++){let n=c[e],d=n.length;if(d)for(let e=0,c,p;e<d;e++)if(p=n[e],a){if(a[p]){if(!u){if(o)o--;else if(i[l++]=p,l===t)return i}(u||s)&&(f[p]=1),g=!0}if(s&&(c=(h[p]||0)+1,h[p]=c,c<r)){let e=s[c-2]||(s[c-2]=[]);e[e.length]=p}}else f[p]=1}if(s)a||(h=f);else if(!g)return[];a=f}if(s)for(let e=s.length-1,r,n;0<=e;e--){n=(r=s[e]).length;for(let e=0,s;e<n;e++)if(!a[s=r[e]]){if(o)o--;else if(i[l++]=s,l===t)return i;a[s]=1}}return i}function x(e){this.l=!0!==e&&e,this.cache=n(),this.h=[]}function T(e,t,o){l(e)&&(e=e.query);let s=this.cache.get(e);return s||(s=this.search(e,t,o),this.cache.set(e,s)),s}x.prototype.set=function(e,t){if(!this.cache[e]){var o=this.h.length;for(o===this.l?delete this.cache[this.h[o-1]]:o++,--o;0<o;o--)this.h[o]=this.h[o-1];this.h[0]=e}this.cache[e]=t},x.prototype.get=function(e){let t=this.cache[e];if(this.l&&t&&(e=this.h.indexOf(e))){let t=this.h[e-1];this.h[e-1]=this.h[e],this.h[e]=t}return t};let I={memory:{charset:"latin:extra",D:3,B:4,m:!1},performance:{D:3,B:3,s:!1,context:{depth:2,D:1}},match:{charset:"latin:extra",G:"reverse"},score:{charset:"latin:advanced",D:20,B:3,context:{depth:3,D:9}},default:{}};function q(e,t,o,s,r,i,n,a){setTimeout(function(){let h=e(o?o+"."+s:s,JSON.stringify(n));h&&h.then?h.then(function(){t.export(e,t,o,r,i+1,a)}):t.export(e,t,o,r,i+1,a)})}function M(e,t){if(!(this instanceof M))return new M(e);if(e){h(e)?e=I[e]:(o=e.preset)&&(e=Object.assign({},o[o],e)),o=e.charset;var o,s=e.lang;h(o)&&(-1===o.indexOf(":")&&(o+=":default"),o=v[o]),h(s)&&(s=b[s])}else e={};let a,l,u=e.context||{};if(this.encode=e.encode||o&&o.encode||w,this.register=t||n(),this.D=a=e.resolution||9,this.G=t=o&&o.G||e.tokenize||"strict",this.depth="strict"===t&&u.depth,this.l=r(u.bidirectional),this.s=l=r(e.optimize),this.m=r(e.fastupdate),this.B=e.minlength||1,this.C=e.boost,this.map=l?i(a):n(),this.A=a=u.resolution||1,this.h=l?i(a):n(),this.F=o&&o.F||e.rtl,this.H=(t=e.matcher||s&&s.H)&&g(t,!1),this.J=(t=e.stemmer||s&&s.J)&&g(t,!0),o=t=e.filter||s&&s.filter){o=t,s=n();for(let e=0,t=o.length;e<t;e++)s[o[e]]=1;o=s}this.filter=o,this.cache=(t=e.cache)&&new x(t)}function G(e,t,o,s,r){return o&&1<e?t+(s||0)<=e?o+(r||0):(e-1)/(t+(s||0))*(o+(r||0))+1|0:0}function S(e,t,o,s,r,i,a){let h=a?e.h:e.map;(!t[o]||a&&!t[o][a])&&(e.s&&(h=h[s]),a?((t=t[o]||(t[o]=n()))[a]=1,h=h[a]||(h[a]=n())):t[o]=1,h=h[o]||(h[o]=[]),e.s||(h=h[s]||(h[s]=[])),i&&h.includes(r)||(h[h.length]=r,e.m&&((e=e.register[r]||(e.register[r]=[]))[e.length]=h)))}function D(e,t,o,s,r,i,n,a){let h=[],l=a?e.h:e.map;if(e.s||(l=j(l,n,a,e.l)),l){let o=0,u=Math.min(l.length,a?e.A:e.D);for(let t=0,c=0,d,f;t<u&&(!(d=l[t])||(e.s&&(d=j(d,n,a,e.l)),r&&d&&i&&((f=d.length)<=r?(r-=f,d=null):(d=d.slice(r),r=0)),!d||(h[o++]=d,!i||!((c+=d.length)>=s))));t++);if(o)return i?O(h,s,0):void(t[t.length]=h)}return!o&&h}function O(e,t,o){return e=1===e.length?e[0]:[].concat.apply([],e),o||e.length>t?e.slice(o,o+t):e}function j(e,t,o,s){return e=o?(e=e[(s=s&&t>o)?t:o])&&e[s?o:t]:e[t]}function C(e,t,o,s,r){let i=0;if(e.constructor===Array){if(r)-1!==(t=e.indexOf(t))?1<e.length&&(e.splice(t,1),i++):i++;else{r=Math.min(e.length,o);for(let n=0,a;n<r;n++)(a=e[n])&&(i=C(a,t,o,s,r),s||i||delete e[n])}}else for(let n in e)(i=C(e[n],t,o,s,r))||delete e[n];return i}function L(e){e=e.data;var t=self._index;let o=e.args;var s=e.task;"init"===s?(s=e.options||{},e=e.factory,t=s.encode,s.cache=!1,t&&0===t.indexOf("function")&&(s.encode=Function("return "+t)()),e?(Function("return "+e)()(self),self._index=new self.FlexSearch.Index(s),delete self.FlexSearch):self._index=new M(s)):(e=e.id,t=t[s].apply(t,o),postMessage("search"===s?{id:e,msg:t}:{id:e}))}(s=M.prototype).append=function(e,t){return this.add(e,t,!0)},s.add=function(e,t,o,s){if(t&&(e||0===e)){if(!s&&!o&&this.register[e])return this.update(e,t);if(s=(t=this.encode(t)).length){let u=n(),c=n(),d=this.depth,f=this.D;for(let g=0;g<s;g++){let p=t[this.F?s-1-g:g];var r=p.length;if(p&&r>=this.B&&(d||!c[p])){var i=G(f,s,g),a="";switch(this.G){case"full":if(2<r){for(i=0;i<r;i++)for(var h=r;h>i;h--)if(h-i>=this.B){var l=G(f,s,g,r,i);S(this,c,a=p.substring(i,h),l,e,o)}break}case"reverse":if(1<r){for(h=r-1;0<h;h--)(a=p[h]+a).length>=this.B&&S(this,c,a,G(f,s,g,r,h),e,o);a=""}case"forward":if(1<r){for(h=0;h<r;h++)(a+=p[h]).length>=this.B&&S(this,c,a,i,e,o);break}default:if(this.C&&(i=Math.min(i/this.C(t,p,g)|0,f-1)),S(this,c,p,i,e,o),d&&1<s&&g<s-1){for(r=n(),a=this.A,i=p,h=Math.min(d+1,s-g),r[i]=1,l=1;l<h;l++)if((p=t[this.F?s-1-g-l:g+l])&&p.length>=this.B&&!r[p]){r[p]=1;let t=this.l&&p>i;S(this,u,t?i:p,G(a+(s/2>a?0:1),s,g,h-1,l-1),e,o,t?p:i)}}}}}this.m||(this.register[e]=1)}}return this},s.search=function(e,t,o){let s,r,i;o||(!t&&l(e)?e=(o=e).query:l(t)&&(o=t));let h=[],u,c,d=0;if(o){e=o.query||e,t=o.limit,d=o.offset||0;var f=o.context;c=o.suggest}if(e&&1<(u=(e=this.encode(""+e)).length)){o=n();var g=[];for(let t=0,s=0,r;t<u;t++)if((r=e[t])&&r.length>=this.B&&!o[r]){if(!this.s&&!c&&!this.map[r])return h;g[s++]=r,o[r]=1}u=(e=g).length}if(!u)return h;for(t||(t=100),f=this.depth&&1<u&&!1!==f,o=0,f?(s=e[0],o=1):1<u&&e.sort(a);o<u;o++){if(i=e[o],f?(r=D(this,h,c,t,d,2===u,i,s),c&&!1===r&&h.length||(s=i)):r=D(this,h,c,t,d,1===u,i),r)return r;if(c&&o===u-1){if(!(g=h.length)){if(f){f=0,o=-1;continue}return h}if(1===g)return O(h[0],t,d)}}return P(h,t,d,c)},s.contain=function(e){return!!this.register[e]},s.update=function(e,t){return this.remove(e).add(e,t)},s.remove=function(e,t){let o=this.register[e];if(o){if(this.m)for(let t=0,s;t<o.length;t++)(s=o[t]).splice(s.indexOf(e),1);else C(this.map,e,this.D,this.s),this.depth&&C(this.h,e,this.A,this.s);if(t||delete this.register[e],this.cache){t=this.cache;for(let o=0,s;o<t.h.length;o++)s=t.h[o],t.cache[s].includes(e)&&(t.h.splice(o--,1),delete t.cache[s])}}return this},s.searchCache=T,s.export=function(e,t,o,s,r,i){let a,h,l=!0;switch(void 0===i&&(l=new Promise(e=>{i=e})),r||(r=0)){case 0:if(a="reg",this.m)for(let e in h=n(),this.register)h[e]=1;else h=this.register;break;case 1:a="cfg",h={doc:0,opt:this.s?1:0};break;case 2:a="map",h=this.map;break;case 3:a="ctx",h=this.h;break;default:void 0===o&&i&&i();return}return q(e,t||this,o,a,s,r,h,i),l},s.import=function(e,t){if(t)switch(h(t)&&(t=JSON.parse(t)),e){case"cfg":this.s=!!t.opt;break;case"reg":this.m=!1,this.register=t;break;case"map":this.map=t;break;case"ctx":this.h=t}},k(M.prototype);let R=0;function E(e){var t;if(!(this instanceof E))return new E(e);e?u(t=e.encode)&&(e.encode=t.toString()):e={},(t=(self||window)._factory)&&(t=t.toString());let s=self.exports,r=this;this.o=function(e,t,s){let r;try{r=t?new(o(1267)).Worker(__dirname+"/node/node.js"):e?new Worker(URL.createObjectURL(new Blob(["onmessage="+L.toString()],{type:"text/javascript"}))):new Worker(h(s)?s:"worker/worker.js",{type:"module"})}catch(e){}return r}(t,s,e.worker),this.h=n(),this.o&&(s?this.o.on("message",function(e){r.h[e.id](e.msg),delete r.h[e.id]}):this.o.onmessage=function(e){e=e.data,r.h[e.id](e.msg),delete r.h[e.id]},this.o.postMessage({task:"init",factory:t,options:e}))}function U(e){E.prototype[e]=E.prototype[e+"Async"]=function(){let t;let o=this,s=[].slice.call(arguments);var r=s[s.length-1];return u(r)&&(t=r,s.splice(s.length-1,1)),r=new Promise(function(t){setTimeout(function(){o.h[++R]=t,o.o.postMessage({task:e,id:R,args:s})})}),t?(r.then(t),this):r}}function B(e){if(!(this instanceof B))return new B(e);var t,o=e.document||e.doc||e;this.K=[],this.h=[],this.A=[],this.register=n(),this.key=(t=o.key||o.id)&&H(t,this.A)||"id",this.m=r(e.fastupdate),this.C=(t=o.store)&&!0!==t&&[],this.store=t&&n(),this.I=(t=o.tag)&&H(t,this.A),this.l=t&&n(),this.cache=(t=e.cache)&&new x(t),e.cache=!1,this.o=e.worker,this.async=!1,t=n();let s=o.index||o.field||o;h(s)&&(s=[s]);for(let o=0,r,i;o<s.length;o++)h(r=s[o])||(i=r,r=r.field),i=l(i)?Object.assign({},e,i):e,this.o&&(t[r]=new E(i),t[r].o||(this.o=!1)),this.o||(t[r]=new M(i,this.register)),this.K[o]=H(r,this.A),this.h[o]=r;if(this.C)for(h(e=o.store)&&(e=[e]),o=0;o<e.length;o++)this.C[o]=H(e[o],this.A);this.index=t}function H(e,t){let o=e.split(":"),s=0;for(let r=0;r<o.length;r++)0<=(e=o[r]).indexOf("[]")&&(e=e.substring(0,e.length-2))&&(t[s]=!0),e&&(o[s++]=e);return s<o.length&&(o.length=s),1<s?o:o[0]}function W(e,t){if(h(t))e=e[t];else for(let o=0;e&&o<t.length;o++)e=e[t[o]];return e}function F(e,t,o,s){let r=this.l[e],i=r&&r.length-o;if(i&&0<i)return(i>t||o)&&(r=r.slice(o,o+t)),s&&(r=_.call(this,r)),{tag:e,result:r}}function _(e){let t=Array(e.length);for(let o=0,s;o<e.length;o++)s=e[o],t[o]={id:s,doc:this.store[s]};return t}U("add"),U("append"),U("search"),U("update"),U("remove"),(s=B.prototype).add=function(e,t,o){if(l(e)&&(e=W(t=e,this.key)),t&&(e||0===e)){if(!o&&this.register[e])return this.update(e,t);for(let s=0,r,i;s<this.h.length;s++)i=this.h[s],h(r=this.K[s])&&(r=[r]),function e(t,o,s,r,i,n,a,h){if(t=t[a]){if(r===o.length-1){if(t.constructor===Array){if(s[r]){for(o=0;o<t.length;o++)i.add(n,t[o],!0,!0);return}t=t.join(" ")}i.add(n,t,h,!0)}else if(t.constructor===Array)for(a=0;a<t.length;a++)e(t,o,s,r,i,n,a,h);else a=o[++r],e(t,o,s,r,i,n,a,h)}}(t,r,this.A,0,this.index[i],e,r[0],o);if(this.I){let s=W(t,this.I),r=n();h(s)&&(s=[s]);for(let t=0,i,n;t<s.length;t++)if(!r[i=s[t]]&&(r[i]=1,n=this.l[i]||(this.l[i]=[]),!o||!n.includes(e))&&(n[n.length]=e,this.m)){let t=this.register[e]||(this.register[e]=[]);t[t.length]=n}}if(this.store&&(!o||!this.store[e])){let o;if(this.C){o=n();for(let e=0,s;e<this.C.length;e++)h(s=this.C[e])?o[s]=t[s]:function e(t,o,s,r,i){if(t=t[i],r===s.length-1)o[i]=t;else if(t){if(t.constructor===Array)for(o=o[i]=Array(t.length),i=0;i<t.length;i++)e(t,o,s,r,i);else o=o[i]||(o[i]=n()),i=s[++r],e(t,o,s,r,i)}}(t,o,s,0,s[0])}this.store[e]=o||t}}return this},s.append=function(e,t){return this.add(e,t,!0)},s.update=function(e,t){return this.remove(e).add(e,t)},s.remove=function(e){if(l(e)&&(e=W(e,this.key)),this.register[e]){for(var t=0;t<this.h.length&&(this.index[this.h[t]].remove(e,!this.o),!this.m);t++);if(this.I&&!this.m)for(let o in this.l){let s=(t=this.l[o]).indexOf(e);-1!==s&&(1<t.length?t.splice(s,1):delete this.l[o])}this.store&&delete this.store[e],delete this.register[e]}return this},s.search=function(e,t,o,s){o||(!t&&l(e)?(o=e,e=""):l(t)&&(o=t,t=0));let r=[],i=[],a,u,c,d,f,g,p=0;if(o){if(o.constructor===Array)c=o,o=null;else{if(e=o.query||e,c=(a=o.pluck)||o.index||o.field,d=o.tag,u=this.store&&o.enrich,f="and"===o.bool,t=o.limit||t||100,g=o.offset||0,d&&(h(d)&&(d=[d]),!e)){for(let e=0,o;e<d.length;e++)(o=F.call(this,d[e],t,g,u))&&(r[r.length]=o,p++);return p?r:[]}h(c)&&(c=[c])}}c||(c=this.h),f=f&&(1<c.length||d&&1<d.length);let m=!s&&(this.o||this.async)&&[];for(let a=0,l,y,w;a<c.length;a++){let b;if(h(y=c[a])||(y=(b=y).field,e=b.query||e,t=b.limit||t,u=b.enrich||u),m)m[a]=this.index[y].searchAsync(e,t,b||o);else{if(w=(l=s?s[a]:this.index[y].search(e,t,b||o))&&l.length,d&&w){let e=[],o=0;f&&(e[0]=[l]);for(let t=0,s,r;t<d.length;t++)s=d[t],(w=(r=this.l[s])&&r.length)&&(o++,e[e.length]=f?[r]:r);o&&(w=(l=f?P(e,t||100,g||0):function(e,t){let o=n(),s=n(),r=[];for(let t=0;t<e.length;t++)o[e[t]]=1;for(let e=0,i;e<t.length;e++){i=t[e];for(let e=0,t;e<i.length;e++)o[t=i[e]]&&!s[t]&&(s[t]=1,r[r.length]=t)}return r}(l,e)).length)}if(w)i[p]=y,r[p++]=l;else if(f)return[]}}if(m){let s=this;return new Promise(function(r){Promise.all(m).then(function(i){r(s.search(e,t,o,i))})})}if(!p)return[];if(a&&(!u||!this.store))return r[0];for(let e=0,t;e<i.length;e++){if((t=r[e]).length&&u&&(t=_.call(this,t)),a)return t;r[e]={field:i[e],result:t}}return r},s.contain=function(e){return!!this.register[e]},s.get=function(e){return this.store[e]},s.set=function(e,t){return this.store[e]=t,this},s.searchCache=T,s.export=function(e,t,o,s,r,i){let n;if(void 0===i&&(n=new Promise(e=>{i=e})),r||(r=0),s||(s=0),s<this.h.length){let o=this.h[s],n=this.index[o];t=this,setTimeout(function(){n.export(e,t,r?o:"",s,r++,i)||(s++,r=1,t.export(e,t,o,s,r,i))})}else{let t,n;switch(r){case 1:t="tag",n=this.l,o=null;break;case 2:t="store",n=this.store,o=null;break;default:i();return}q(e,this,o,t,s,r,n,i)}return n},s.import=function(e,t){if(t)switch(h(t)&&(t=JSON.parse(t)),e){case"tag":this.l=t;break;case"reg":this.m=!1,this.register=t;for(let e=0,o;e<this.h.length;e++)(o=this.index[this.h[e]]).register=t,o.m=!1;break;case"store":this.store=t;break;default:let o=(e=e.split("."))[0];e=e[1],o&&e&&this.index[o].import(e,t)}},k(B.prototype);let K=[m("[\xe0\xe1\xe2\xe3\xe4\xe5]"),"a",m("[\xe8\xe9\xea\xeb]"),"e",m("[\xec\xed\xee\xef]"),"i",m("[\xf2\xf3\xf4\xf5\xf6ő]"),"o",m("[\xf9\xfa\xfb\xfcű]"),"u",m("[\xfdŷ\xff]"),"y",m("\xf1"),"n",m("[\xe7c]"),"k",m("\xdf"),"s",m(" & ")," and "];function J(e){var t=e=""+e;return t.normalize&&(t=t.normalize("NFD").replace(f,"")),c.call(this,t.toLowerCase(),!e.normalize&&K)}let z=/[^a-z0-9]+/,N={b:"p",v:"f",w:"f",z:"s",x:"s",ß:"s",d:"t",n:"m",c:"k",g:"k",j:"k",q:"k",i:"e",y:"e",u:"o"};function Y(e){e=J.call(this,e).join(" ");let t=[];if(e){let o=e.split(z),s=o.length;for(let r=0,i,n=0;r<s;r++)if((e=o[r])&&(!this.filter||!this.filter[e])){let o=N[i=e[0]]||i,s=o;for(let t=1;t<e.length;t++){let r=N[i=e[t]]||i;r&&r!==s&&(o+=r,s=r)}t[n++]=o}}return t}let V=[m("ae"),"a",m("oe"),"o",m("sh"),"s",m("th"),"t",m("ph"),"f",m("pf"),"f",m("(?![aeo])h(?![aeo])"),"",m("(?!^[aeo])h(?!^[aeo])"),""];function Q(e,t){return e&&(2<(e=Y.call(this,e).join(" ")).length&&(e=p(e,V)),t||(1<e.length&&(e=y(e)),e&&(e=e.split(" ")))),e||[]}let X=m("(?!\\b)[aeo]");v["latin:default"]={encode:w,F:!1,G:""},v["latin:simple"]={encode:J,F:!1,G:""},v["latin:balance"]={encode:Y,F:!1,G:"strict"},v["latin:advanced"]={encode:Q,F:!1,G:""},v["latin:extra"]={encode:function(e){return e&&(1<(e=Q.call(this,e,!0)).length&&(e=e.replace(X,"")),1<e.length&&(e=y(e)),e&&(e=e.split(" "))),e||[]},F:!1,G:""};let Z=new({Index:M,Document:B,Worker:E,registerCharset:function(e,t){v[e]=t},registerLanguage:function(e,t){b[e]=t}}).Document({tokenize:"full",document:{id:"url",index:"content",store:["title","pageTitle"]},context:{resolution:9,depth:2,bidirectional:!0}});for(let{url:e,sections:t}of[{url:"/",sections:[["Getting started ","getting-started",["To get started, create a new application in your developer settings, then read about how to make requests for the resources you need to access using our HTTP APIs or dedicated client SDKs. When your integration is ready to go live, publish it to our integrations directory to reach the Protocol community. ","Get your API key"]]]},{url:"/attachments",sections:[["General Gameplay",null,["Enhance your Minecraft server by tapping into the General Gameplay features provided by the Enchanted API. Plugins can extend the Api class to use these functionalities that offer more interaction with the game mechanics. In this section, we cover the advancement and attribute methods to manipulate player advancements and attributes."]],["The advancement Model","the-advancement-model",["The advancement method allows plugins to grant or revoke an advancement or its criterion from players to track or reward player progress.","Method","Parameters","'grant' or 'revoke' to specify what to do with the advancement.","The player selector or name to target.","The namespaced ID of the advancement to target (optional).","The specific criterion within the advancement to target (optional)."]],["The attribute Model","the-attribute-model",["Attributes define various properties of entities, such as health or armor. These methods are used for getting, setting, and modifying attributes programmatically.","Methods","Get Total Attribute Value","Get Base Attribute Value","Set Base Attribute Value","Add Attribute Modifier","Remove Attribute Modifier","Get Attribute Modifier Value","Parameters for Attribute Methods","Specifies the target entity.","Specifies the attribute to interact with.","The value to set for an attribute (optional for some methods).","A unique identifier for the attribute modifier (required for some methods).","The name of the modifier (optional for some methods).","The operation of the modifier (optional for some methods).","The scale to get the attribute (optional for some methods)."]]]},{url:"/authentication",sections:[["Authentication",null,["You'll need to authenticate your requests to access any of the endpoints in the Protocol API. In this guide, we'll look at how authentication works. Protocol offers two ways to authenticate your API requests: Basic authentication and OAuth2 with a token — OAuth2 is the recommended way. "]],["Basic authentication","basic-authentication",["With basic authentication, you use your username and password to authenticate your HTTP requests. Unless you have a very good reason, you probably shouldn't use basic auth. Here's how to authenticate using cURL:","Please don't commit your Protocol password to GitHub!"]],["OAuth2 with bearer token","o-auth2-with-bearer-token",["The recommended way to authenticate with the Protocol API is by using OAuth2. When establishing a connection using OAuth2, you will need your access token — you will find it in the Protocol dashboard under API settings. Here's how to add the token to the request header using cURL:","Always keep your token safe and reset it if you suspect it has been compromised."]],["Using an SDK","using-an-sdk",["If you use one of our official SDKs, you won't have to worry about any of the above — fetch your access token from the Protocol dashboard under API settings, and the client library will take care of the rest. All the client libraries use OAuth2 behind the scenes.","Check out our list of first-party SDKs"]]]},{url:"/contacts",sections:[["Game Rules and Modes",null,['Master control over your Minecraft server\'s rules and modes to fine-tune the gameplay experience. The "Enchanted" API\'s "Game Rules and Modes" category provides server-side methods to configure essential game settings through your plugins. This versatility allows for custom game modes and rule enforcement.']],["Game Modes","game-modes",["Default Game Mode","Set the server's default game mode for new players.","Player Game Mode","Change the game mode for a specific player or set of players."]],["Game Rules","game-rules",["Set Difficulty","Adjust the server's difficulty level.","Modify Experience","Modify experience points or levels for players.","Usage and Code Examples","Set Default Game Mode","Change Player Game Mode","Set Difficulty Level","Adjust Player Experience","These methods enable your plugin to interact with core gameplay mechanics, offering flexibility for custom scenarios and server management. For actual use, ensure that the permissions and conditions are appropriately checked before altering game settings."]]]},{url:"/conversations",sections:[["List and Information",null,['Dive into the insights and details of your Minecraft world with the "List and Information" category of the "Enchanted" API. Easily list players and retrieve valuable data, providing an overview of in-game entities and player status.']],["Player and Entity Information Methods","player-and-entity-information-methods",["List Players","Retrieve a list of all players on the server.","Entity Information (e.g., Entities, Blocks)","Query detailed information about entities and blocks in the game.","Example Usage","List Players","Get a list of all players currently online:","Entity Information","Fetch and display information about a specific entity:","Utility",'The "List and Information" category also features utility methods that can be extremely powerful when creating plugins that need to perform read operations on the numerous entities that exist within the Minecraft server.']]]},{url:"/errors",sections:[["Errors",null,["In this guide, we will talk about what happens when something goes wrong while you work with the API. Mistakes happen, and mostly they will be yours, not ours. Let's look at some status codes and error types you might encounter. ","You can tell if your request was successful by checking the status code when receiving an API response. If a response comes back unsuccessful, you can use the error type and error message to figure out what has gone wrong and do some rudimentary debugging (before contacting support).","Before reaching out to support with an error, please be aware that 99% of all\nreported errors are, in fact, user errors. Therefore, please carefully check\nyour code before contacting Protocol support."]],["Status codes","status-codes",["Here is a list of the different categories of status codes returned by the Protocol API. Use these to understand if a request was successful.","A 2xx status code indicates a successful response.","A 4xx status code indicates a client error — this means it's a you\nproblem.","A 5xx status code indicates a server error — you won't be seeing these."]],["Error types","error-types",["Whenever a request is unsuccessful, the Protocol API will return an error response with an error type and message. You can use this information to understand better what has gone wrong and how to fix it. Most of the error messages are pretty helpful and actionable.","Here is a list of the two error types supported by the Protocol API — use these to understand what you have done wrong.","This means that we made an error, which is highly speculative and unlikely.","This means that you made an error, which is much more likely."]]]},{url:"/groups",sections:[["Groups",null,["Groups are where communities live in Protocol — they are a collection of contacts you're talking to all at once. On this page, we'll dive into the different group endpoints you can use to manage groups programmatically. We'll look at how to query, create, update, and delete groups. "]],["The group model","the-group-model",["The group model contains all the information about your groups, including what contacts are in the group and the group's name, description, and avatar.","Properties","Unique identifier for the group.","The name for the group.","The description for the group.","The avatar image URL for the group.","Unique identifier for the conversation that belongs to the group.","An array of contact objects that are members of the group.","Timestamp of when the group was created.","Timestamp of when the group was archived."]],["List all groups ","list-all-groups",["This endpoint allows you to retrieve a paginated list of all your groups. By default, a maximum of ten groups are shown per page.","Optional attributes","Limit the number of groups returned.","Only show groups that are archived when set to true."]],["Create a group ","create-a-group",["This endpoint allows you to create a new group conversation between you and a group of your Protocol contacts.","Required attributes","The name for the group.","Optional attributes","The description for the group.","The avatar image URL for the group.","An array of contact objects that are members of the group."]],["Retrieve a group ","retrieve-a-group",["This endpoint allows you to retrieve a group by providing the group id. Refer to the list at the top of this page to see which properties are included with group objects."]],["Update a group ","update-a-group",["This endpoint allows you to perform an update on a group. Examples of updates are changing the name, description, and avatar or adding and removing contacts from the group.","Optional attributes","The new name for the group.","The new description for the group.","The new avatar image URL for the group.","An array of contact objects that are members of the group.","Timestamp of when the group was archived."]],["Delete a group ","delete-a-group",["This endpoint allows you to delete groups. Note: This will permanently delete the group, including the messages — archive it instead if you want to be able to restore it later."]]]},{url:"/messages",sections:[["Messages",null,["Messages are what conversations are made of in Protocol — they are the basic building blocks of your conversations with your Protocol contacts. On this page, we'll dive into the different message endpoints you can use to manage messages programmatically. We'll look at how to query, send, update, and delete messages. "]],["The message model","the-message-model",["The message model contains all the information about the messages and attachments you send to your contacts and groups, including how your contacts have reacted to them.","Properties","Unique identifier for the message.","Unique identifier for the conversation the message belongs to.","The contact object for the contact who sent the message.","The message content.","An array of reaction objects associated with the message.","An array of attachment objects associated with the message.","Timestamp of when the message was read.","Timestamp of when the message was created.","Timestamp of when the message was last updated."]],["List all messages ","list-all-messages",["This endpoint allows you to retrieve a paginated list of all your messages (in a conversation if a conversation id is provided). By default, a maximum of ten messages are shown per page.","Optional attributes","Limit to messages from a given conversation.","Limit the number of messages returned."]],["Send a message ","send-a-message",["This endpoint allows you to send a new message to one of your conversations.","Required attributes","Unique identifier for the conversation the message belongs to.","The message content.","Optional attributes","An array of attachment objects associated with the message."]],["Retrieve a message ","retrieve-a-message",["This endpoint allows you to retrieve a message by providing the message id. Refer to the list at the top of this page to see which properties are included with message objects."]],["Update a message ","update-a-message",["This endpoint allows you to perform an update on a message. Examples of updates are adding a reaction, editing the message, or adding an attachment.","Optional attributes","The message content.","An array of reaction objects associated with the message.","An array of attachment objects associated with the message."]],["Delete a message ","delete-a-message",["This endpoint allows you to delete messages from your conversations. Note: This will permanently delete the message."]]]},{url:"/pagination",sections:[["Pagination",null,["In this guide, we will look at how to work with paginated responses when querying the Protocol API. By default, all responses limit results to ten. However, you can go as high as 100 by adding a limit parameter to your requests. If you are using one of the official Protocol API client libraries, you don't need to worry about pagination, as it's all being taken care of behind the scenes. ","When an API response returns a list of objects, no matter the amount, pagination is supported. In paginated responses, objects are nested in a data attribute and have a has_more attribute that indicates whether you have reached the end of the last page. You can use the starting_after and endding_before query parameters to browse pages."]],["Example using cursors","example-using-cursors",["In this example, we request the page that starts after the conversation with id s4WycXedwhQrEFuM. As a result, we get a list of three conversations and can tell by the has_more attribute that we have reached the end of the resultset.","The last ID on the page you're currently on when you want to fetch the next page.","The first ID on the page you're currently on when you want to fetch the previous page.","Limit the number of items returned."]]]},{url:"/quickstart",sections:[["Quickstart",null,["This guide will get you all set up and ready to use the Protocol API. We'll cover how to get started using one of our API clients and how to make your first API request. We'll also look at where to go next to find all the information you need to take full advantage of our powerful REST API. ","Before you can make requests to the Protocol API, you will need to grab your\nAPI key from your dashboard. You find it under Settings \xbb API."]],["Choose your client","choose-your-client",["Before making your first API request, you need to pick which API client you will use. In addition to good ol' cURL HTTP requests, Protocol offers clients for JavaScript, Python, and PHP. In the following example, you can see how to install each client.","Check out our list of first-party SDKs"]],["Making your first API request","making-your-first-api-request",["After picking your preferred client, you are ready to make your first call to the Protocol API. Below, you can see how to send a GET request to the Conversations endpoint to get a list of all your conversations. In the cURL example, results are limited to ten conversations, the default page length for each client.","Read the docs for the Conversations endpoint"]],["What's next?","whats-next",["Great, you're now set up with an API client and have made your first request to the API. Here are a few links that might be handy as you venture further into the Protocol API:","Grab your API key from the Protocol dashboard","Check out the Conversations endpoint","Learn about the different error messages in Protocol"]]]},{url:"/sdks",sections:[["Protocol SDKs",null,["The recommended way to interact with the Protocol API is by using one of our official SDKs. Today, Protocol offers fine-tuned JavaScript, Ruby, PHP, Python, and Go libraries to make your life easier and give you the best experience when consuming the API. "]]]},{url:"/webhooks",sections:[["Webhooks",null,["In this guide, we will look at how to register and consume webhooks to integrate your app with Protocol. With webhooks, your app can know when something happens in Protocol, such as someone sending a message or adding a contact. "]],["Registering webhooks","registering-webhooks",["To register a new webhook, you need to have a URL in your app that Protocol can call. You can configure a new webhook from the Protocol dashboard under API settings. Give your webhook a name, pick the events you want to listen for, and add your URL.","Now, whenever something of interest happens in your app, a webhook is fired off by Protocol. In the next section, we'll look at how to consume webhooks."]],["Consuming webhooks","consuming-webhooks",["When your app receives a webhook request from Protocol, check the type attribute to see what event caused it. The first part of the event type will tell you the payload type, e.g., a conversation, message, etc.","In the example above, a conversation was updated, and the payload type is a conversation.","See all event types"]],["Event types","event-types",["A new contact was created.","An existing contact was updated.","A contact was successfully deleted.","A new conversation was created.","An existing conversation was updated.","A conversation was successfully deleted.","A new message was created.","An existing message was updated.","A message was successfully deleted.","A new group was created.","An existing group was updated.","A group was successfully deleted.","A new attachment was created.","An existing attachment was updated.","An attachment was successfully deleted."]],["Security","security",["To know for sure that a webhook was, in fact, sent by Protocol instead of a malicious actor, you can verify the request signature. Each webhook request contains a header named x-protocol-signature, and you can verify this signature by using your secret webhook key. The signature is an HMAC hash of the request payload hashed using your secret key. Here is an example of how to verify the signature in your app:","If your generated signature matches the x-protocol-signature header, you can be sure that the request was truly coming from Protocol. It's essential to keep your secret webhook key safe — otherwise, you can no longer be sure that a given webhook was sent by Protocol. Don't commit your secret webhook key to GitHub!"]]]}])for(let[o,s,r]of t)Z.add({url:e+(s?"#"+s:""),title:o,content:[o,...r].join("\n"),pageTitle:s?t[0][0]:void 0});function $(e,t={}){let o=Z.search(e,{...t,enrich:!0});return 0===o.length?[]:o[0].result.map(e=>({url:e.id,title:e.doc.title,pageTitle:e.doc.pageTitle}))}}};