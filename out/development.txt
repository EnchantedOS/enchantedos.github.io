2:I[5824,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","841","static/chunks/841-15946dcd10b62610.js","909","static/chunks/app/development/page-6cb9e8b9ccf41c2b.js"],"Heading"]
3:I[3801,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","841","static/chunks/841-15946dcd10b62610.js","909","static/chunks/app/development/page-6cb9e8b9ccf41c2b.js"],"Pre"]
4:I[3801,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","841","static/chunks/841-15946dcd10b62610.js","909","static/chunks/app/development/page-6cb9e8b9ccf41c2b.js"],"Code"]
7:I[3801,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","841","static/chunks/841-15946dcd10b62610.js","909","static/chunks/app/development/page-6cb9e8b9ccf41c2b.js"],"CodeGroup"]
17:I[5250,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","841","static/chunks/841-15946dcd10b62610.js","909","static/chunks/app/development/page-6cb9e8b9ccf41c2b.js"],""]
18:I[4052,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","841","static/chunks/841-15946dcd10b62610.js","909","static/chunks/app/development/page-6cb9e8b9ccf41c2b.js"],"Feedback"]
19:I[5613,[],""]
1a:I[1778,[],""]
5:T68a,<span><span style="color: var(--shiki-token-comment)"># Clone the repository</span></span>
<span><span style="color: var(--shiki-token-function)">git</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">clone</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">https://github.com/your-repo/enchanted</span></span>
<span><span style="color: var(--shiki-token-function)">cd</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">enchanted</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)"># Install Deno</span></span>
<span><span style="color: var(--shiki-token-function)">curl</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">-fsSL</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">https://deno.land/x/install/install.sh</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">sh</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)"># Start development server</span></span>
<span><span style="color: var(--shiki-token-function)">deno</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">task</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">dev</span></span>
<span></span>6:Td19,<span><span style="color: var(--shiki-token-function)">enchanted-server/</span></span>
<span><span style="color: var(--shiki-token-function)">├──</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">modules/</span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-comment)"># Your module files</span></span>
<span><span style="color: var(--shiki-token-function)">│</span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-string)">├──</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">Economy/</span></span>
<span><span style="color: var(--shiki-token-function)">│</span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-string)">├──</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">Permissions/</span></span>
<span><span style="color: var(--shiki-token-function)">│</span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-string)">└──</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">Chat/</span></span>
<span><span style="color: var(--shiki-token-function)">├──</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">core/</span><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-comment)"># Core server files</span></span>
<span><span style="color: var(--shiki-token-function)">├──</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">api/</span><span style="color: var(--shiki-color-text)">                 </span><span style="color: var(--shiki-token-comment)"># API endpoints</span></span>
<span><span style="color: var(--shiki-token-function)">├──</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">docker-compose.yaml</span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)"># Docker configuration</span></span>
<span><span style="color: var(--shiki-token-function)">├──</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">.env</span><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-comment)"># Environment variables</span></span>
<span><span style="color: var(--shiki-token-function)">├──</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">deno.json</span><span style="color: var(--shiki-color-text)">           </span><span style="color: var(--shiki-token-comment)"># Deno configuration</span></span>
<span><span style="color: var(--shiki-token-function)">└──</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">main.ts</span><span style="color: var(--shiki-color-text)">             </span><span style="color: var(--shiki-token-comment)"># Server entry point</span></span>
<span></span>8:T8c5,<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ExampleModule&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">version</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;1.0.0&#39;</span></span>
<span><span style="color: var(--shiki-color-text)">})</span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ExampleModule</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Event</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;player_joined&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">handleJoin</span><span style="color: var(--shiki-color-text)">(context</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ScriptContext</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span><span style="color: var(--shiki-token-comment)">// Implementation</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>9:Tb50,<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ExampleModule&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">version</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;1.0.0&#39;</span></span>
<span><span style="color: var(--shiki-color-text)">})</span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ExampleModule</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Command</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;example&#39;</span><span style="color: var(--shiki-color-text)">])</span></span>
<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Description</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Example command&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Permission</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;player&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">handleCommand</span><span style="color: var(--shiki-color-text)">(context</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ScriptContext</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span><span style="color: var(--shiki-token-comment)">// Implementation</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>a:Td10,<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ExampleModule&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">version</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;1.0.0&#39;</span></span>
<span><span style="color: var(--shiki-color-text)">})</span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ExampleModule</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Command</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;store&#39;</span><span style="color: var(--shiki-color-text)">])</span></span>
<span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">handleStore</span><span style="color: var(--shiki-color-text)">({ params</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> kv }</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ScriptContext</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">kv</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;example&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;data&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">value</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;stored&#39;</span></span>
<span><span style="color: var(--shiki-color-text)">});</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>b:T894,<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&quot;tasks&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">&quot;dev&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;deno run -A --unstable-kv --watch=core/,api/ main.ts&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">&quot;check&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;deno fmt --check &amp;&amp; deno lint &amp;&amp; deno check **/*.ts&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">&quot;start&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;deno run -A --unstable-kv main.ts&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">&quot;build&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;deno run -A --unstable-kv --unstable-broadcast-channel main.ts build&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>c:T466,<span><span style="color: var(--shiki-token-comment)">// In-game testing</span></span>
<span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)">example test</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Expected response in chat:</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;text&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-string-expression)">&quot;Command response&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;color&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-string-expression)">&quot;green&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>d:T892,<span><span style="color: var(--shiki-token-comment)">// Connect to WebSocket</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">socket</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">WebSocket</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;ws://localhost:8081&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Send test message</span></span>
<span><span style="color: var(--shiki-token-constant)">socket</span><span style="color: var(--shiki-token-function)">.send</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">eventType</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;example_event&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">test</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span><span style="color: var(--shiki-color-text)">}));</span></span>
<span></span>e:T565,<span><span style="color: var(--shiki-token-comment)">// Check stored data in KV</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">kv</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;example&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;data&#39;</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.value);</span></span>
<span></span>f:Ta3c,<span><span style="color: var(--shiki-token-constant)">1.</span><span style="color: var(--shiki-color-text)"> Deno </span><span style="color: var(--shiki-token-constant)">CLI</span></span>
<span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> deno fmt         </span><span style="color: var(--shiki-token-comment)">// Format code</span></span>
<span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> deno lint        </span><span style="color: var(--shiki-token-comment)">// Lint code</span></span>
<span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> deno check       </span><span style="color: var(--shiki-token-comment)">// Type check</span></span>
<span></span>
<span><span style="color: var(--shiki-token-constant)">2.</span><span style="color: var(--shiki-color-text)"> Docker Tools</span></span>
<span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> docker</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">compose up   </span><span style="color: var(--shiki-token-comment)">// Start services</span></span>
<span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> docker</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">compose logs </span><span style="color: var(--shiki-token-comment)">// View logs</span></span>
<span></span>
<span><span style="color: var(--shiki-token-constant)">3.</span><span style="color: var(--shiki-color-text)"> Development Server</span></span>
<span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> Hot reload</span></span>
<span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> Debug logging</span></span>
<span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> Error reporting</span></span>
<span></span>10:T1838,<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">  name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;DebugModule&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  version</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;1.0.0&#39;</span></span>
<span><span style="color: var(--shiki-color-text)">})</span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">DebugModule</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  @</span><span style="color: var(--shiki-token-function)">Event</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;player_joined&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">handleJoin</span><span style="color: var(--shiki-color-text)">({ params</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> log }</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ScriptContext</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Use the logger</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Player joined: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">params</span><span style="color: var(--shiki-color-text)">.playerName</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Debug specific values</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Params:&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(params</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">));</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Your code</span></span>
<span><span style="color: var(--shiki-color-text)">    } </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Log errors with stack traces</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Error: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">error</span><span style="color: var(--shiki-color-text)">.message</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Stack: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">error</span><span style="color: var(--shiki-color-text)">.stack</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>11:T802,<span><span style="color: var(--shiki-color-text)"># Development environment variables</span></span>
<span><span style="color: var(--shiki-token-constant)">DENO_KV_ACCESS_TOKEN</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">your</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">secure</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">token</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">here</span></span>
<span><span style="color: var(--shiki-token-constant)">DENO_KV_URL</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">http</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-token-comment)">//kv:4512</span></span>
<span><span style="color: var(--shiki-token-constant)">DENORITE_ALLOWED_ORIGIN</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">http</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-token-comment)">//localhost:3000</span></span>
<span><span style="color: var(--shiki-token-constant)">DENORITE_SERVER_SECRET</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">dev</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">secret</span></span>
<span><span style="color: var(--shiki-token-constant)">DENORITE_JWT_SECRET</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">dev</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">jwt</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">secret</span></span>
<span></span>12:T6cd,<span><span style="color: var(--shiki-token-comment)"># Start development environment</span></span>
<span><span style="color: var(--shiki-token-function)">docker-compose</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">up</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">-d</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)"># View logs</span></span>
<span><span style="color: var(--shiki-token-function)">docker-compose</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">logs</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">-f</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">server</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)"># Rebuild after changes</span></span>
<span><span style="color: var(--shiki-token-function)">docker-compose</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">up</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">-d</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">--build</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)"># Stop services</span></span>
<span><span style="color: var(--shiki-token-function)">docker-compose</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">down</span></span>
<span></span>13:T996,<span><span style="color: var(--shiki-token-constant)">1.</span><span style="color: var(--shiki-color-text)"> Save changes to </span><span style="color: var(--shiki-token-keyword)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">file</span></span>
<span><span style="color: var(--shiki-color-text)">2. </span><span style="color: var(--shiki-token-function)">Development</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">server</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">detects</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">changes</span></span>
<span><span style="color: var(--shiki-color-text)">3. </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">is</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">gracefully</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">unloaded</span></span>
<span><span style="color: var(--shiki-color-text)">4. </span><span style="color: var(--shiki-token-function)">New</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">version</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">is</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">loaded</span></span>
<span><span style="color: var(--shiki-color-text)">5. </span><span style="color: var(--shiki-token-function)">State</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">is</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">preserved</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">KV</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">store</span></span>
<span></span>14:T428,<span><span style="color: var(--shiki-token-constant)">1.</span><span style="color: var(--shiki-color-text)"> Use TypeScript strict mode</span></span>
<span><span style="color: var(--shiki-token-constant)">2.</span><span style="color: var(--shiki-color-text)"> Implement proper error handling</span></span>
<span><span style="color: var(--shiki-token-constant)">3.</span><span style="color: var(--shiki-color-text)"> Log meaningful debug information</span></span>
<span><span style="color: var(--shiki-token-constant)">4.</span><span style="color: var(--shiki-color-text)"> Use atomic operations for data</span></span>
<span><span style="color: var(--shiki-token-constant)">5.</span><span style="color: var(--shiki-color-text)"> Test edge cases</span></span>
<span><span style="color: var(--shiki-token-constant)">6.</span><span style="color: var(--shiki-color-text)"> Document your code</span></span>
<span><span style="color: var(--shiki-token-constant)">7.</span><span style="color: var(--shiki-color-text)"> Follow consistent naming</span></span>
<span></span>15:T5d4,<span><span style="color: var(--shiki-token-constant)">1.</span><span style="color: var(--shiki-color-text)"> Create </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> file</span></span>
<span><span style="color: var(--shiki-token-constant)">2.</span><span style="color: var(--shiki-color-text)"> Implement basic functionality</span></span>
<span><span style="color: var(--shiki-token-constant)">3.</span><span style="color: var(--shiki-color-text)"> Test </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> development</span></span>
<span><span style="color: var(--shiki-token-constant)">4.</span><span style="color: var(--shiki-color-text)"> Add error handling</span></span>
<span><span style="color: var(--shiki-token-constant)">5.</span><span style="color: var(--shiki-color-text)"> Implement storage</span></span>
<span><span style="color: var(--shiki-token-constant)">6.</span><span style="color: var(--shiki-color-text)"> Test edge cases</span></span>
<span><span style="color: var(--shiki-token-constant)">7.</span><span style="color: var(--shiki-color-text)"> Document features</span></span>
<span><span style="color: var(--shiki-token-constant)">8.</span><span style="color: var(--shiki-color-text)"> Deploy to production</span></span>
<span></span>16:T2f25,<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">  name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;DevModule&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  version</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;1.0.0&#39;</span></span>
<span><span style="color: var(--shiki-color-text)">})</span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">DevModule</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Command for development testing</span></span>
<span><span style="color: var(--shiki-color-text)">  @</span><span style="color: var(--shiki-token-function)">Command</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;dev&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;test&#39;</span><span style="color: var(--shiki-color-text)">])</span></span>
<span><span style="color: var(--shiki-color-text)">  @</span><span style="color: var(--shiki-token-function)">Permission</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;operator&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">testFeature</span><span style="color: var(--shiki-color-text)">({ params</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> kv</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> api</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> log }</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ScriptContext</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-constant)">sender</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">args</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> params;</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Log development info</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Testing feature: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">args</span><span style="color: var(--shiki-color-text)">.feature</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Arguments:`</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(args</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">));</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Test storage</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">kv</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;dev&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;test&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">        timestamp</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Date</span><span style="color: var(--shiki-token-function)">.now</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        args</span></span>
<span><span style="color: var(--shiki-color-text)">      });</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Test API</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">api</span><span style="color: var(--shiki-token-function)">.tellraw</span><span style="color: var(--shiki-color-text)">(sender</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">        text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Test successful&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;green&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">      }));</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    } </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Detailed error logging</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Test error: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">error</span><span style="color: var(--shiki-color-text)">.message</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Stack: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">error</span><span style="color: var(--shiki-color-text)">.stack</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">api</span><span style="color: var(--shiki-token-function)">.tellraw</span><span style="color: var(--shiki-color-text)">(sender</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">        text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`Test failed: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">error</span><span style="color: var(--shiki-color-text)">.message</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;red&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">      }));</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>0:["m6CdOmFbkUcxvfzSbSfo9",[[["",{"children":["development",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",{"children":["development",{"children":["__PAGE__",{},["$L1",["$","article",null,{"className":"flex h-full flex-col pb-10 pt-16","children":[["$","div",null,{"className":"flex-auto prose dark:prose-invert [html_:where(&>*)]:mx-auto [html_:where(&>*)]:max-w-2xl [html_:where(&>*)]:lg:mx-[calc(50%-min(50%,theme(maxWidth.lg)))] [html_:where(&>*)]:lg:max-w-3xl","children":[["$","h1",null,{"children":"Development"}],"\n",["$","p",null,{"children":"Learn how to efficiently develop and test modules for your Enchanted server.","className":"lead"}],"\n",["$","$L2",null,{"level":2,"id":"development-environment","children":"Development Environment"}],"\n",["$","p",null,{"children":"First, set up your development environment:"}],"\n",["$","$L3",null,{"language":"bash","code":"# Clone the repository\ngit clone https://github.com/your-repo/enchanted\ncd enchanted\n\n# Install Deno\ncurl -fsSL https://deno.land/x/install/install.sh | sh\n\n# Start development server\ndeno task dev\n","children":["$","$L4",null,{"className":"language-bash","children":"$5"}],"title":"Setup"}],"\n",["$","div",null,{"className":"my-6 flex gap-2.5 rounded-sm border border-fuchsia-500/20 bg-fuchsia-50/50 p-4 leading-6 text-fuchsia-900 dark:border-fuchsia-500/30 dark:bg-fuchsia-500/5 dark:text-fuchsia-200 dark:[--tw-prose-links-hover:theme(colors.fuchsia.300)] dark:[--tw-prose-links:theme(colors.white)]","children":[["$","svg",null,{"viewBox":"0 0 16 16","aria-hidden":"true","className":"mt-1 h-4 w-4 flex-none fill-fuchsia-500 stroke-white dark:fill-fuchsia-200/20 dark:stroke-fuchsia-200","children":[["$","circle",null,{"cx":"8","cy":"8","r":"8","strokeWidth":"0"}],["$","path",null,{"fill":"none","strokeLinecap":"round","strokeLinejoin":"round","strokeWidth":"1.5","d":"M6.75 7.75h1.5v3.5"}],["$","circle",null,{"cx":"8","cy":"4","r":".5","fill":"none"}]]}],["$","div",null,{"className":"[&>:first-child]:mt-0 [&>:last-child]:mb-0","children":["$","p",null,{"children":["The development server automatically reloads your modules when changes are detected in the ",["$","$L4",null,{"children":"modules/"}]," directory."]}]}]]}],"\n",["$","$L2",null,{"level":2,"id":"project-structure","children":"Project Structure"}],"\n",["$","p",null,{"children":"Organize your Enchanted project following this structure:"}],"\n",["$","$L3",null,{"language":"bash","code":"enchanted-server/\n├── modules/              # Your module files\n│   ├── Economy/\n│   ├── Permissions/\n│   └── Chat/\n├── core/                # Core server files\n├── api/                 # API endpoints\n├── docker-compose.yaml  # Docker configuration\n├── .env                # Environment variables\n├── deno.json           # Deno configuration\n└── main.ts             # Server entry point\n","children":["$","$L4",null,{"className":"language-bash","children":"$6"}],"title":"Directory Structure"}],"\n",["$","$L2",null,{"level":2,"id":"module-development","children":"Module Development"}],"\n",["$","p",null,{"children":"Create new modules using TypeScript decorators:"}],"\n",["$","$L7",null,{"children":[["$","$L3",null,{"language":"typescript","code":"@Module({\nname: 'ExampleModule',\nversion: '1.0.0'\n})\nexport class ExampleModule {\n@Event('player_joined')\nasync handleJoin(context: ScriptContext) {\n// Implementation\n}\n}\n","children":["$","$L4",null,{"className":"language-typescript","children":"$8"}],"title":"Basic Module"}],["$","$L3",null,{"language":"typescript","code":"@Module({\nname: 'ExampleModule',\nversion: '1.0.0'\n})\nexport class ExampleModule {\n@Command(['example'])\n@Description('Example command')\n@Permission('player')\nasync handleCommand(context: ScriptContext) {\n// Implementation\n}\n}\n","children":["$","$L4",null,{"className":"language-typescript","children":"$9"}],"title":"With Commands"}],["$","$L3",null,{"language":"typescript","code":"@Module({\nname: 'ExampleModule',\nversion: '1.0.0'\n})\nexport class ExampleModule {\n@Command(['store'])\nasync handleStore({ params, kv }: ScriptContext) {\nawait kv.set(['example', 'data'], {\nvalue: 'stored'\n});\n}\n}\n","children":["$","$L4",null,{"className":"language-typescript","children":"$a"}],"title":"With Storage"}]]}],"\n",["$","$L2",null,{"level":2,"id":"development-server","children":"Development Server"}],"\n",["$","p",null,{"children":"The development server provides hot-reload capabilities:"}],"\n",["$","$L3",null,{"language":"json","code":"{\n  \"tasks\": {\n    \"dev\": \"deno run -A --unstable-kv --watch=core/,api/ main.ts\",\n    \"check\": \"deno fmt --check && deno lint && deno check **/*.ts\",\n    \"start\": \"deno run -A --unstable-kv main.ts\",\n    \"build\": \"deno run -A --unstable-kv --unstable-broadcast-channel main.ts build\"\n  }\n}\n","children":["$","$L4",null,{"className":"language-json","children":"$b"}],"title":"deno.json"}],"\n",["$","$L2",null,{"level":2,"id":"testing-modules","children":"Testing Modules"}],"\n",["$","p",null,{"children":"Test your modules during development:"}],"\n",["$","$L7",null,{"children":[["$","$L3",null,{"language":"typescript","code":"// In-game testing\n/example test\n\n// Expected response in chat:\n{\n    \"text\": \"Command response\",\n    \"color\": \"green\"\n}\n","children":["$","$L4",null,{"className":"language-typescript","children":"$c"}],"title":"Command Testing"}],["$","$L3",null,{"language":"typescript","code":"// Connect to WebSocket\nconst socket = new WebSocket('ws://localhost:8081');\n\n// Send test message\nsocket.send(JSON.stringify({\neventType: 'example_event',\ndata: {\ntest: true\n}\n}));\n","children":["$","$L4",null,{"className":"language-typescript","children":"$d"}],"title":"WebSocket Testing"}],["$","$L3",null,{"language":"typescript","code":"// Check stored data in KV\nconst data = await kv.get(['example', 'data']);\nconsole.log(data.value);\n","children":["$","$L4",null,{"className":"language-typescript","children":"$e"}],"title":"Storage Testing"}]]}],"\n",["$","$L2",null,{"level":2,"id":"development-tools","children":"Development Tools"}],"\n",["$","p",null,{"children":"Essential tools for Enchanted development:"}],"\n",["$","$L3",null,{"language":"typescript","code":"1. Deno CLI\n   - deno fmt         // Format code\n   - deno lint        // Lint code\n   - deno check       // Type check\n\n2. Docker Tools\n   - docker-compose up   // Start services\n   - docker-compose logs // View logs\n\n3. Development Server\n   - Hot reload\n   - Debug logging\n   - Error reporting\n","children":["$","$L4",null,{"className":"language-typescript","children":"$f"}],"title":"Available Tools"}],"\n",["$","$L2",null,{"level":2,"id":"debugging","children":"Debugging"}],"\n",["$","p",null,{"children":"Debug your modules effectively:"}],"\n",["$","$L3",null,{"language":"typescript","code":"@Module({\n  name: 'DebugModule',\n  version: '1.0.0'\n})\nexport class DebugModule {\n  @Event('player_joined')\n  async handleJoin({ params, log }: ScriptContext) {\n    // Use the logger\n    log(`Player joined: ${params.playerName}`);\n\n    // Debug specific values\n    log('Params:', JSON.stringify(params, null, 2));\n\n    try {\n      // Your code\n    } catch (error) {\n      // Log errors with stack traces\n      log(`Error: ${error.message}`);\n      log(`Stack: ${error.stack}`);\n    }\n  }\n}\n","children":["$","$L4",null,{"className":"language-typescript","children":"$10"}],"title":"Debugging Examples"}],"\n",["$","$L2",null,{"level":2,"id":"development-configuration","children":"Development Configuration"}],"\n",["$","p",null,{"children":"Configure your development environment:"}],"\n",["$","$L3",null,{"language":"typescript","code":"# Development environment variables\nDENO_KV_ACCESS_TOKEN=your-secure-token-here\nDENO_KV_URL=http://kv:4512\nDENORITE_ALLOWED_ORIGIN=http://localhost:3000\nDENORITE_SERVER_SECRET=dev-secret\nDENORITE_JWT_SECRET=dev-jwt-secret\n","children":["$","$L4",null,{"className":"language-typescript","children":"$11"}],"title":".env"}],"\n",["$","$L2",null,{"level":2,"id":"working-with-docker","children":"Working with Docker"}],"\n",["$","p",null,{"children":"Develop using Docker:"}],"\n",["$","$L3",null,{"language":"bash","code":"# Start development environment\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f server\n\n# Rebuild after changes\ndocker-compose up -d --build\n\n# Stop services\ndocker-compose down\n","children":["$","$L4",null,{"className":"language-bash","children":"$12"}],"title":"Docker Commands"}],"\n",["$","$L2",null,{"level":2,"id":"module-hot-reloading","children":"Module Hot Reloading"}],"\n",["$","p",null,{"children":"Modules are automatically reloaded when changes are detected:"}],"\n",["$","$L3",null,{"language":"typescript","code":"1. Save changes to module file\n2. Development server detects changes\n3. Module is gracefully unloaded\n4. New version is loaded\n5. State is preserved in KV store\n","children":["$","$L4",null,{"className":"language-typescript","children":"$13"}],"title":"Hot Reload Process"}],"\n",["$","$L2",null,{"level":2,"id":"common-development-tasks","children":"Common Development Tasks"}],"\n",["$","p",null,{"children":"Here are some common development tasks:"}],"\n",["$","$L7",null,{"children":[["$","$L3",null,{"language":"typescript","code":"// Format all TypeScript files\ndeno fmt\n\n// Check formatting\ndeno fmt --check\n","children":["$","$L4",null,{"className":"language-typescript","children":"<span><span style=\"color: var(--shiki-token-comment)\">// Format all TypeScript files</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">deno fmt</span></span>\n<span></span>\n<span><span style=\"color: var(--shiki-token-comment)\">// Check formatting</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">deno fmt </span><span style=\"color: var(--shiki-token-keyword)\">--</span><span style=\"color: var(--shiki-color-text)\">check</span></span>\n<span></span>"}],"title":"Format Code"}],["$","$L3",null,{"language":"typescript","code":"// Check types\ndeno check **/*.ts\n\n// Watch mode\ndeno check --watch **/*.ts\n","children":["$","$L4",null,{"className":"language-typescript","children":"<span><span style=\"color: var(--shiki-token-comment)\">// Check types</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">deno check </span><span style=\"color: var(--shiki-token-keyword)\">**</span><span style=\"color: var(--shiki-token-comment)\">/*.ts</span></span>\n<span></span>\n<span><span style=\"color: var(--shiki-token-comment)\">// Watch mode</span></span>\n<span><span style=\"color: var(--shiki-token-comment)\">deno check --watch **/</span><span style=\"color: var(--shiki-token-keyword)\">*</span><span style=\"color: var(--shiki-color-text)\">.ts</span></span>\n<span></span>"}],"title":"Type Check"}],["$","$L3",null,{"language":"typescript","code":"// Lint all files\ndeno lint\n\n// Fix automatically\ndeno lint --fix\n","children":["$","$L4",null,{"className":"language-typescript","children":"<span><span style=\"color: var(--shiki-token-comment)\">// Lint all files</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">deno lint</span></span>\n<span></span>\n<span><span style=\"color: var(--shiki-token-comment)\">// Fix automatically</span></span>\n<span><span style=\"color: var(--shiki-color-text)\">deno lint </span><span style=\"color: var(--shiki-token-keyword)\">--</span><span style=\"color: var(--shiki-color-text)\">fix</span></span>\n<span></span>"}],"title":"Lint Code"}]]}],"\n",["$","$L2",null,{"level":2,"id":"best-practices","children":"Best Practices"}],"\n",["$","p",null,{"children":"Follow these development best practices:"}],"\n",["$","$L3",null,{"language":"typescript","code":"1. Use TypeScript strict mode\n2. Implement proper error handling\n3. Log meaningful debug information\n4. Use atomic operations for data\n5. Test edge cases\n6. Document your code\n7. Follow consistent naming\n","children":["$","$L4",null,{"className":"language-typescript","children":"$14"}],"title":"Development Guidelines"}],"\n",["$","$L2",null,{"level":2,"id":"module-development-lifecycle","children":"Module Development Lifecycle"}],"\n",["$","p",null,{"children":"Typical module development workflow:"}],"\n",["$","$L3",null,{"language":"typescript","code":"1. Create new module file\n2. Implement basic functionality\n3. Test in development\n4. Add error handling\n5. Implement storage\n6. Test edge cases\n7. Document features\n8. Deploy to production\n","children":["$","$L4",null,{"className":"language-typescript","children":"$15"}],"title":"Development Workflow"}],"\n",["$","$L2",null,{"level":2,"id":"example-development-module","children":"Example Development Module"}],"\n",["$","p",null,{"children":"Here's a well-structured development module:"}],"\n",["$","$L3",null,{"language":"typescript","code":"@Module({\n  name: 'DevModule',\n  version: '1.0.0'\n})\nexport class DevModule {\n  // Command for development testing\n  @Command(['dev', 'test'])\n  @Permission('operator')\n  async testFeature({ params, kv, api, log }: ScriptContext) {\n    const { sender, args } = params;\n\n    try {\n      // Log development info\n      log(`Testing feature: ${args.feature}`);\n      log(`Arguments:`, JSON.stringify(args, null, 2));\n\n      // Test storage\n      await kv.set(['dev', 'test'], {\n        timestamp: Date.now(),\n        args\n      });\n\n      // Test API\n      await api.tellraw(sender, JSON.stringify({\n        text: \"Test successful\",\n        color: \"green\"\n      }));\n\n    } catch (error) {\n      // Detailed error logging\n      log(`Test error: ${error.message}`);\n      log(`Stack: ${error.stack}`);\n\n      await api.tellraw(sender, JSON.stringify({\n        text: `Test failed: ${error.message}`,\n        color: \"red\"\n      }));\n    }\n  }\n}\n","children":["$","$L4",null,{"className":"language-typescript","children":"$16"}],"title":"DevModule.ts"}],"\n",["$","div",null,{"className":"not-prose","children":["$","$L17",null,{"className":"inline-flex gap-0.5 justify-center overflow-hidden text-sm font-medium transition text-fuchsia-500 hover:text-fuchsia-600 dark:text-fuchsia-400 dark:hover:text-fuchsia-500","href":"/modules","children":[false,"Learn more about Modules",["$","svg",null,{"viewBox":"0 0 20 20","fill":"none","aria-hidden":"true","className":"mt-0.5 h-5 w-5 relative top-px -mr-1","children":["$","path",null,{"stroke":"currentColor","strokeLinecap":"round","strokeLinejoin":"round","d":"m11.5 6.5 3 3.5m0 0-3 3.5m3-3.5h-9"}]}]]}]}]]}],["$","footer",null,{"className":"mx-auto mt-16 w-full max-w-2xl lg:max-w-5xl","children":["$","$L18",null,{}]}]]}],null]]},["$","$L19",null,{"parallelRouterKey":"children","segmentPath":["children","development","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L1a",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,"$L1b",null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cfc91e73f16c955c.css","precedence":"next","crossOrigin":""}]],"$L1c"]]]]
1c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Development - Enchanted Server Documentation"}],["$","meta","3",{"name":"description","content":"Learn about the development workflow and best practices when building Enchanted modules."}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"48x48"}]]
1:null
1d:I[4840,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","536","static/chunks/536-654abe48faf78f66.js","841","static/chunks/841-15946dcd10b62610.js","185","static/chunks/app/layout-4890250a0dcdb7a7.js"],"Providers"]
1e:I[8733,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","536","static/chunks/536-654abe48faf78f66.js","841","static/chunks/841-15946dcd10b62610.js","185","static/chunks/app/layout-4890250a0dcdb7a7.js"],"Layout"]
1b:["$","html",null,{"lang":"en","className":"h-full","suppressHydrationWarning":true,"children":["$","body",null,{"className":"flex min-h-full bg-white antialiased dark:bg-zinc-900","children":["$","$L1d",null,{"children":["$","div",null,{"className":"w-full","children":["$","$L1e",null,{"allSections":{"/":[{"title":"What is Enchanted?","id":"what-is-enchanted"},{"title":"Key Features","id":"key-features"},{"title":"Getting Started","id":"getting-started"}],"/architecture":[{"title":"System Overview","id":"system-overview"},{"title":"Real-Time Communication","id":"real-time-communication"},{"title":"Module System","id":"module-system"},{"title":"State Management","id":"state-management"},{"title":"Server Components","id":"server-components"},{"title":"Fabric Plugin Integration","id":"fabric-plugin-integration"},{"title":"Security Model","id":"security-model"},{"title":"Data Flow","id":"data-flow"},{"title":"Performance Considerations","id":"performance-considerations"},{"title":"Development Workflow","id":"development-workflow"}],"/commands":[{"title":"Command Basics","id":"command-basics"},{"title":"Command Arguments","id":"command-arguments"},{"title":"Subcommands","id":"subcommands"},{"title":"Command Responses","id":"command-responses"},{"title":"Command Permissions","id":"command-permissions"},{"title":"Command Error Handling","id":"command-error-handling"},{"title":"Complete Example","id":"complete-example"}],"/authentication":[{"title":"Basic Auth Module","id":"basic-auth-module"},{"title":"Client Usage","id":"client-usage"},{"title":"Permission Levels","id":"permission-levels"},{"title":"Token Structure","id":"token-structure"},{"title":"Secure Storage","id":"secure-storage"},{"title":"Security Best Practices","id":"security-best-practices"},{"title":"Enhanced Implementation","id":"enhanced-implementation"},{"title":"What's next?","id":"whats-next"}],"/decorators":[{"title":"Module Decorator","id":"module-decorator"},{"title":"Event Decorator","id":"event-decorator"},{"title":"Command Decorator","id":"command-decorator"},{"title":"Description Decorator","id":"description-decorator"},{"title":"Permission Decorator","id":"permission-decorator"},{"title":"Argument Decorator","id":"argument-decorator"},{"title":"Socket Decorator","id":"socket-decorator"},{"title":"Decorator Combinations","id":"decorator-combinations"},{"title":"Complete Example","id":"complete-example"},{"title":"Argument Types","id":"argument-types"},{"title":"Permission Levels","id":"permission-levels"}],"/errors":[{"title":"Core Concepts","id":"core-concepts"},{"title":"Command Error Handling","id":"command-error-handling"},{"title":"Socket Error Handling","id":"socket-error-handling"},{"title":"Event Error Handling","id":"event-error-handling"},{"title":"Storage Error Handling","id":"storage-error-handling"},{"title":"Error Types","id":"error-types"},{"title":"Best Practices","id":"best-practices"},{"title":"Complete Example","id":"complete-example"}],"/events":[{"title":"Event Basics","id":"event-basics"},{"title":"Player Events","id":"player-events"},{"title":"Block Events","id":"block-events"},{"title":"Combat Events","id":"combat-events"},{"title":"Container Events","id":"container-events"},{"title":"Server Events","id":"server-events"},{"title":"Event Handler Patterns","id":"event-handler-patterns"},{"title":"Complete Example","id":"complete-example"}],"/installation":[{"title":"Prerequisites","id":"prerequisites"},{"title":"Environment Setup","id":"environment-setup"},{"title":"Docker Compose Configuration","id":"docker-compose-configuration"},{"title":"Project Configuration","id":"project-configuration"},{"title":"Project Structure","id":"project-structure"},{"title":"Starting the Server","id":"starting-the-server"},{"title":"Verifying Your Installation","id":"verifying-your-installation"},{"title":"Development Commands","id":"development-commands"},{"title":"Troubleshooting Common Issues","id":"troubleshooting-common-issues"}],"/minecraft-api":[{"title":"Basic Commands","id":"basic-commands"},{"title":"Player Management","id":"player-management"},{"title":"World Manipulation","id":"world-manipulation"},{"title":"Scoreboard Management","id":"scoreboard-management"},{"title":"Chat & Messages","id":"chat-and-messages"},{"title":"Player Data","id":"player-data"},{"title":"Complete Example","id":"complete-example"}],"/development":[{"title":"Development Environment","id":"development-environment"},{"title":"Project Structure","id":"project-structure"},{"title":"Module Development","id":"module-development"},{"title":"Development Server","id":"development-server"},{"title":"Testing Modules","id":"testing-modules"},{"title":"Development Tools","id":"development-tools"},{"title":"Debugging","id":"debugging"},{"title":"Development Configuration","id":"development-configuration"},{"title":"Working with Docker","id":"working-with-docker"},{"title":"Module Hot Reloading","id":"module-hot-reloading"},{"title":"Common Development Tasks","id":"common-development-tasks"},{"title":"Best Practices","id":"best-practices"},{"title":"Module Development Lifecycle","id":"module-development-lifecycle"},{"title":"Example Development Module","id":"example-development-module"}],"/modules":[{"title":"Basic Module Structure","id":"basic-module-structure"},{"title":"Module Context","id":"module-context"},{"title":"Event Handling","id":"event-handling"},{"title":"Command Registration","id":"command-registration"},{"title":"Socket Communication","id":"socket-communication"},{"title":"State Management","id":"state-management"},{"title":"Module Communication","id":"module-communication"},{"title":"Module Lifecycle","id":"module-lifecycle"},{"title":"Complex Module Example","id":"complex-module-example"}],"/permissions":[{"title":"Permission Levels","id":"permission-levels"},{"title":"Using Permissions","id":"using-permissions"},{"title":"Permission Context","id":"permission-context"},{"title":"Permission Checks","id":"permission-checks"},{"title":"Command Permissions","id":"command-permissions"},{"title":"Socket Handler Permissions","id":"socket-handler-permissions"},{"title":"Error Handling","id":"error-handling"},{"title":"Best Practices","id":"best-practices"},{"title":"Example Module","id":"example-module"}],"/quickstart":[{"title":"Choose your setup","id":"choose-your-setup"},{"title":"Creating your first module","id":"creating-your-first-module"},{"title":"What's next?","id":"whats-next"}],"/script-context":[{"title":"Context Structure","id":"context-structure"},{"title":"Parameters","id":"parameters"},{"title":"Storage Access","id":"storage-access"},{"title":"Authentication","id":"authentication"},{"title":"Player Communication","id":"player-communication"},{"title":"Player Management","id":"player-management"},{"title":"Logging","id":"logging"},{"title":"Complete Example","id":"complete-example"}],"/storage":[{"title":"Basic Operations","id":"basic-operations"},{"title":"Key Structure","id":"key-structure"},{"title":"Atomic Operations","id":"atomic-operations"},{"title":"Data Models","id":"data-models"},{"title":"Data Management Patterns","id":"data-management-patterns"},{"title":"Complete Example","id":"complete-example"}],"/types":[{"title":"Core Types","id":"core-types"},{"title":"Authentication Types","id":"authentication-types"},{"title":"Decorator Types","id":"decorator-types"},{"title":"API Types","id":"api-types"},{"title":"Event Types","id":"event-types"},{"title":"Storage Types","id":"storage-types"},{"title":"WebSocket Types","id":"web-socket-types"},{"title":"Utility Types","id":"utility-types"},{"title":"Type Usage Example","id":"type-usage-example"}],"/utilities":[{"title":"Rate Limiting","id":"rate-limiting"},{"title":"Message Formatting","id":"message-formatting"},{"title":"Time Utilities","id":"time-utilities"},{"title":"Data Validation","id":"data-validation"},{"title":"Promise Utilities","id":"promise-utilities"},{"title":"Collection Utilities","id":"collection-utilities"},{"title":"Complete Example","id":"complete-example"}],"/websockets":[{"title":"Socket Basics","id":"socket-basics"},{"title":"Message Structure","id":"message-structure"},{"title":"Authentication","id":"authentication"},{"title":"Real-time Updates","id":"real-time-updates"},{"title":"Client Implementation","id":"client-implementation"},{"title":"Socket State Management","id":"socket-state-management"},{"title":"Complete Example","id":"complete-example"}],"/examples/basic-module":[{"title":"Complete Module","id":"complete-module"},{"title":"Module Breakdown","id":"module-breakdown"},{"title":"Usage Examples","id":"usage-examples"},{"title":"Key Concepts Demonstrated","id":"key-concepts-demonstrated"}],"/examples/economy":[{"title":"Complete Module","id":"complete-module"},{"title":"Key Features","id":"key-features"},{"title":"Usage Examples","id":"usage-examples"},{"title":"Key Concepts","id":"key-concepts"},{"title":"Common Patterns","id":"common-patterns"},{"title":"Extension Ideas","id":"extension-ideas"}],"/examples/chat":[{"title":"Complete Module","id":"complete-module"},{"title":"WebSocket Integration","id":"web-socket-integration"},{"title":"Usage Examples","id":"usage-examples"},{"title":"Key Features","id":"key-features"}],"/examples/player-stats":[{"title":"Complete Module","id":"complete-module"},{"title":"Stats Tracking","id":"stats-tracking"},{"title":"Usage","id":"usage"},{"title":"Event Handling","id":"event-handling"},{"title":"Web Integration","id":"web-integration"},{"title":"Key Features","id":"key-features"}]},"children":["$","$L19",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L1a",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"absolute inset-0 -z-10 mx-0 max-w-none overflow-hidden","children":["$","div",null,{"className":"absolute left-1/2 top-0 ml-[-38rem] h-[25rem] w-[81.25rem] dark:[mask-image:linear-gradient(white,transparent)]","children":[["$","div",null,{"className":"absolute inset-0 bg-gradient-to-r from-[#fff] to-[#fff] opacity-40 [mask-image:radial-gradient(farthest-side_at_top,white,transparent)] dark:from-[#000]/30 dark:to-[#000]/30 dark:opacity-100","children":["$","svg",null,{"aria-hidden":"true","className":"absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5","children":[["$","defs",null,{"children":["$","pattern",null,{"id":":S1:","width":72,"height":56,"patternUnits":"userSpaceOnUse","x":-12,"y":4,"children":["$","path",null,{"d":"M.5 56V.5H72","fill":"none"}]}]}],["$","rect",null,{"width":"100%","height":"100%","strokeWidth":0,"fill":"url(#:S1:)"}],["$","svg",null,{"x":-12,"y":4,"className":"overflow-visible","children":[["$","rect","4-3",{"strokeWidth":"0","width":73,"height":57,"x":288,"y":168}],["$","rect","2-1",{"strokeWidth":"0","width":73,"height":57,"x":144,"y":56}],["$","rect","7-3",{"strokeWidth":"0","width":73,"height":57,"x":504,"y":168}],["$","rect","10-6",{"strokeWidth":"0","width":73,"height":57,"x":720,"y":336}]]}]]}]}],["$","svg",null,{"viewBox":"0 0 1113 440","aria-hidden":"true","className":"absolute left-1/2 top-0 ml-[-19rem] w-[69.5625rem] fill-white blur-[26px] dark:hidden","children":["$","path",null,{"d":"M.016 439.5s-9.5-300 434-300S882.516 20 882.516 20V0h230.004v439.5H.016Z"}]}]]}]}],["$","div",null,{"className":"mx-auto flex h-full max-w-xl flex-col items-center justify-center py-16 text-center","children":[["$","p",null,{"className":" text-5xl font-semibold text-zinc-900 dark:text-white","children":"404"}],["$","h1",null,{"className":"mt-2 text-2xl font-bold text-zinc-900 dark:text-white","children":"Page not found"}],["$","p",null,{"className":"mt-2 text-base text-zinc-600 dark:text-zinc-400","children":"Sorry, we couldn’t find the page you’re looking for."}],["$","$L17",null,{"className":"inline-flex gap-0.5 justify-center overflow-hidden text-sm font-medium transition rounded-sm bg-zinc-900 py-1 px-3 text-white hover:bg-zinc-700 dark:bg-fuchsia-400/10 dark:text-fuchsia-400 dark:ring-1 dark:ring-inset dark:ring-fuchsia-400/20 dark:hover:bg-fuchsia-400/10 dark:hover:text-fuchsia-300 dark:hover:ring-fuchsia-300 mt-8","href":"/","children":[false,"Back to docs",["$","svg",null,{"viewBox":"0 0 20 20","fill":"none","aria-hidden":"true","className":"mt-0.5 h-5 w-5 -mr-1","children":["$","path",null,{"stroke":"currentColor","strokeLinecap":"round","strokeLinejoin":"round","d":"m11.5 6.5 3 3.5m0 0-3 3.5m3-3.5h-9"}]}]]}]]}]],"notFoundStyles":[],"styles":null}]}]}]}]}]}]
