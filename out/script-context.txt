2:I[5824,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","841","static/chunks/841-15946dcd10b62610.js","59","static/chunks/app/script-context/page-8329ea4b290c163a.js"],"Heading"]
3:I[3801,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","841","static/chunks/841-15946dcd10b62610.js","59","static/chunks/app/script-context/page-8329ea4b290c163a.js"],"Pre"]
4:I[3801,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","841","static/chunks/841-15946dcd10b62610.js","59","static/chunks/app/script-context/page-8329ea4b290c163a.js"],"Code"]
6:I[3801,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","841","static/chunks/841-15946dcd10b62610.js","59","static/chunks/app/script-context/page-8329ea4b290c163a.js"],"CodeGroup"]
11:I[5250,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","841","static/chunks/841-15946dcd10b62610.js","59","static/chunks/app/script-context/page-8329ea4b290c163a.js"],""]
12:I[4052,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","841","static/chunks/841-15946dcd10b62610.js","59","static/chunks/app/script-context/page-8329ea4b290c163a.js"],"Feedback"]
13:I[5613,[],""]
14:I[1778,[],""]
5:T25d6,<span><span style="color: var(--shiki-token-keyword)">interface</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ScriptContext</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  params</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Record</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">unknown</span><span style="color: var(--shiki-color-text)">&gt;;    </span><span style="color: var(--shiki-token-comment)">// Event/command parameters</span></span>
<span><span style="color: var(--shiki-color-text)">  kv</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Deno</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">Kv</span><span style="color: var(--shiki-color-text)">;                       </span><span style="color: var(--shiki-token-comment)">// Key-value storage</span></span>
<span><span style="color: var(--shiki-color-text)">  api</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MinecraftApi</span><span style="color: var(--shiki-color-text)">;                 </span><span style="color: var(--shiki-token-comment)">// Minecraft API</span></span>
<span><span style="color: var(--shiki-color-text)">  auth</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">AuthContext</span><span style="color: var(--shiki-color-text)">;                 </span><span style="color: var(--shiki-token-comment)">// Authentication utilities</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">log</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (message</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">void</span><span style="color: var(--shiki-color-text)">;    </span><span style="color: var(--shiki-token-comment)">// Logging function</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">sendToPlayer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (playerId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">unknown</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">void</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">broadcastPlayers</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (data</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">unknown</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">void</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">messagePlayer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (playerId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> message</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    color</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">    bold</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">    italic</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">    underlined</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">    sound</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">  }) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Promise</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-constant)">void</span><span style="color: var(--shiki-color-text)">&gt;;</span></span>
<span><span style="color: var(--shiki-color-text)">  playerManager</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">PlayerManager</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">  players</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">PlayerData</span><span style="color: var(--shiki-color-text)">[];</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">isOnline</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (playerName</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">isOperator</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (playerName</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>7:T6a6,<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Command</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;example&#39;</span><span style="color: var(--shiki-color-text)">])</span></span>
<span><span style="color: var(--shiki-color-text)">async </span><span style="color: var(--shiki-token-function)">handleCommand</span><span style="color: var(--shiki-color-text)">({ params }: ScriptContext) {</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-token-constant)">sender</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">           </span><span style="color: var(--shiki-token-comment)">// Command sender&#39;s name</span></span>
<span><span style="color: var(--shiki-token-constant)">args</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">             </span><span style="color: var(--shiki-token-comment)">// Command arguments</span></span>
<span><span style="color: var(--shiki-token-constant)">senderType</span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// Type of sender</span></span>
<span><span style="color: var(--shiki-color-text)">} </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> params;</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>8:T8f0,<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Event</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;player_joined&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">async </span><span style="color: var(--shiki-token-function)">handleJoin</span><span style="color: var(--shiki-color-text)">({ params }: ScriptContext) {</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-token-constant)">playerId</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">         </span><span style="color: var(--shiki-token-comment)">// Player UUID</span></span>
<span><span style="color: var(--shiki-token-constant)">playerName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">       </span><span style="color: var(--shiki-token-comment)">// Player username</span></span>
<span><span style="color: var(--shiki-token-constant)">x</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">y</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">z</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// Coordinates</span></span>
<span><span style="color: var(--shiki-token-constant)">dimension</span><span style="color: var(--shiki-color-text)">         </span><span style="color: var(--shiki-token-comment)">// World dimension</span></span>
<span><span style="color: var(--shiki-color-text)">} </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> params;</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>9:T69e,<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Socket</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;example&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">async </span><span style="color: var(--shiki-token-function)">handleSocket</span><span style="color: var(--shiki-color-text)">({ params }: ScriptContext) {</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-token-constant)">token</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-comment)">// Authentication token</span></span>
<span><span style="color: var(--shiki-token-constant)">socket</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">           </span><span style="color: var(--shiki-token-comment)">// WebSocket connection</span></span>
<span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-comment)">// Message data</span></span>
<span><span style="color: var(--shiki-color-text)">} </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> params;</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>a:T1460,<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Command</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;save&#39;</span><span style="color: var(--shiki-color-text)">])</span></span>
<span><span style="color: var(--shiki-color-text)">async </span><span style="color: var(--shiki-token-function)">saveData</span><span style="color: var(--shiki-color-text)">({ params</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> kv }: ScriptContext) {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Read data</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">kv</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;key&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;subkey&#39;</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Write data</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">kv</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;key&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;subkey&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Atomic operations</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">kv</span><span style="color: var(--shiki-token-function)">.atomic</span><span style="color: var(--shiki-color-text)">()</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.check</span><span style="color: var(--shiki-color-text)">(previousValue)</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.mutate</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">      type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;set&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      key</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;key&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      value</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> newValue</span></span>
<span><span style="color: var(--shiki-color-text)">    })</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.commit</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>b:T182f,<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Socket</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;verify&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">async </span><span style="color: var(--shiki-token-function)">verifyUser</span><span style="color: var(--shiki-color-text)">({ params</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> auth }: ScriptContext) {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Verify JWT token</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">payload</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">auth</span><span style="color: var(--shiki-token-function)">.verifyToken</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">params</span><span style="color: var(--shiki-color-text)">.token);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Check permissions</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">hasPermission</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">auth</span><span style="color: var(--shiki-token-function)">.checkPermission</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;player&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Get player info</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">playerId</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">auth</span><span style="color: var(--shiki-token-function)">.getPlayerIdFromName</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">params</span><span style="color: var(--shiki-color-text)">.playerName);</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">playerName</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">auth</span><span style="color: var(--shiki-token-function)">.getPlayerNameFromId</span><span style="color: var(--shiki-color-text)">(playerId);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> { success</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> payload };</span></span>
<span><span style="color: var(--shiki-color-text)">  } </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> { success</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> error</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">error</span><span style="color: var(--shiki-color-text)">.message };</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>c:T152a,<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Event</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;player_death&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">async </span><span style="color: var(--shiki-token-function)">handleDeath</span><span style="color: var(--shiki-color-text)">({ params</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> messagePlayer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> broadcastPlayers }: ScriptContext) {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Send message to specific player</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">messagePlayer</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">params</span><span style="color: var(--shiki-color-text)">.playerId</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;You died!&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;red&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    bold</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    sound</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;entity.player.death&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">  });</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Broadcast to all players</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">broadcastPlayers</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;player_died&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    data</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">      player</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">params</span><span style="color: var(--shiki-color-text)">.playerName</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      location</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">        x</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">params</span><span style="color: var(--shiki-color-text)">.x</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        y</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">params</span><span style="color: var(--shiki-color-text)">.y</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        z</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">params</span><span style="color: var(--shiki-color-text)">.z</span></span>
<span><span style="color: var(--shiki-color-text)">      }</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">  });</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>d:T11c2,<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Command</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;players&#39;</span><span style="color: var(--shiki-color-text)">])</span></span>
<span><span style="color: var(--shiki-color-text)">async </span><span style="color: var(--shiki-token-function)">listPlayers</span><span style="color: var(--shiki-color-text)">({ players</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> isOnline</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> isOperator }: ScriptContext) {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Get all players</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">playerList</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">players</span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(player </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> ({</span></span>
<span><span style="color: var(--shiki-color-text)">    name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">player</span><span style="color: var(--shiki-color-text)">.name</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    online</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isOnline</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">player</span><span style="color: var(--shiki-color-text)">.name)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    operator</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isOperator</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">player</span><span style="color: var(--shiki-color-text)">.name)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    joinTime</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">player</span><span style="color: var(--shiki-color-text)">.joinTime</span></span>
<span><span style="color: var(--shiki-color-text)">  }));</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Access player manager for more operations</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">onlinePlayers</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">players</span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(p </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isOnline</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">p</span><span style="color: var(--shiki-color-text)">.name));</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>e:T114e,<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Event</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;player_joined&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">async </span><span style="color: var(--shiki-token-function)">handleJoin</span><span style="color: var(--shiki-color-text)">({ params</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> log }: ScriptContext) {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Basic logging</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Player joined: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">params</span><span style="color: var(--shiki-color-text)">.playerName</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Debug information</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Params:&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(params</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">));</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  } </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Error logging</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Error: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">error</span><span style="color: var(--shiki-color-text)">.message</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Stack: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">error</span><span style="color: var(--shiki-color-text)">.stack</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>f:Tc18,@Module({
  name: 'ServerManager',
  version: '1.0.0'
})
export class ServerManager {
  @Command(['status'])
  @Permission('player')
  async getStatus({
    params,
    api,
    kv,
    players,
    isOnline,
    isOperator,
    log
  }: ScriptContext) {
    const { sender } = params;

    try {
      // Get server stats
      const stats = await kv.get(['server', 'stats']);
      const currentStats = stats.value || {
        startTime: Date.now(),
        players: 0,
        uptime: 0
      };

      // Get online players
      const onlinePlayers = players.filter(p => isOnline(p.name));
      const operators = players.filter(p => isOperator(p.name));

      // Update stats
      await kv.set(['server', 'stats'], {
        ...currentStats,
        players: onlinePlayers.length,
        uptime: Date.now() - currentStats.startTime
      });

      // Log request
      log(`Status requested by ${sender}`);

      // Send response
      await api.tellraw(sender, JSON.stringify([
        {
          text: "=== Server Status ===\n",
          color: "gold",
          bold: true
        },
        {
          text: `Players Online: ${onlinePlayers.length}\n`,
          color: "yellow"
        },
        {
          text: `Operators Online: ${operators.length}\n`,
          color: "aqua"
        },
        {
          text: `Uptime: ${Math.floor(currentStats.uptime / (1000 * 60))}m\n`,
          color: "green"
        }
      ]));

    } catch (error) {
      log(`Error in status command: ${error.message}`);

      await api.tellraw(sender, JSON.stringify({
        text: `Error: ${error.message}`,
        color: "red"
      }));
    }
  }

  @Socket('server_info')
  async getServerInfo({
    params,
    kv,
    auth,
    players,
    isOnline
  }: ScriptContext) {
    try {
      // Verify authentication
      if (!await auth.checkPermission('player')) {
        return {
          success: false,
          error: 'Unauthorized'
        };
      }

      // Get server info
      const info = {
        players: players.filter(p => isOnline(p.name)).map(p => ({
          name: p.name,
          joinTime: p.joinTime
        })),
        stats: await kv.get(['server', 'stats']).then(r => r.value)
      };

      return {
        success: true,
        data: info
      };

    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }

  @Event('player_joined')
  async handleJoin({
    params,
    messagePlayer,
    broadcastPlayers,
    log
  }: ScriptContext) {
    const { playerId, playerName } = params;

    try {
      // Welcome message
      await messagePlayer(playerId, "Welcome to the server!", {
        color: "gold",
        bold: true,
        sound: "entity.player.levelup"
      });

      // Broadcast join
      broadcastPlayers({
        type: 'player_join',
        data: {
          player: playerName,
          timestamp: Date.now()
        }
      });

      log(`Player ${playerName} joined the server`);

    } catch (error) {
      log(`Error handling join: ${error.message}`);
    }
  }
}
10:T9014,<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">  name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ServerManager&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  version</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;1.0.0&#39;</span></span>
<span><span style="color: var(--shiki-color-text)">})</span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ServerManager</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  @</span><span style="color: var(--shiki-token-function)">Command</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;status&#39;</span><span style="color: var(--shiki-color-text)">])</span></span>
<span><span style="color: var(--shiki-color-text)">  @</span><span style="color: var(--shiki-token-function)">Permission</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;player&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getStatus</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    params</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    api</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    kv</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    players</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    isOnline</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    isOperator</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    log</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ScriptContext</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-constant)">sender</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> params;</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Get server stats</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">stats</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">kv</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;server&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;stats&#39;</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">currentStats</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">stats</span><span style="color: var(--shiki-color-text)">.value </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">        startTime</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Date</span><span style="color: var(--shiki-token-function)">.now</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        players</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        uptime</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span></span>
<span><span style="color: var(--shiki-color-text)">      };</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Get online players</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">onlinePlayers</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">players</span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(p </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isOnline</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">p</span><span style="color: var(--shiki-color-text)">.name));</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">operators</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">players</span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(p </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isOperator</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">p</span><span style="color: var(--shiki-color-text)">.name));</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Update stats</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">kv</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;server&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;stats&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">currentStats</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        players</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">onlinePlayers</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        uptime</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Date</span><span style="color: var(--shiki-token-function)">.now</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">currentStats</span><span style="color: var(--shiki-color-text)">.startTime</span></span>
<span><span style="color: var(--shiki-color-text)">      });</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Log request</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Status requested by </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">sender</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Send response</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">api</span><span style="color: var(--shiki-token-function)">.tellraw</span><span style="color: var(--shiki-color-text)">(sender</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">([</span></span>
<span><span style="color: var(--shiki-color-text)">        {</span></span>
<span><span style="color: var(--shiki-color-text)">          text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;=== Server Status ===\n&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">          color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;gold&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">          bold</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>
<span><span style="color: var(--shiki-color-text)">        }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        {</span></span>
<span><span style="color: var(--shiki-color-text)">          text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`Players Online: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">onlinePlayers</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">\n`</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">          color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;yellow&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">        }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        {</span></span>
<span><span style="color: var(--shiki-color-text)">          text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`Operators Online: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">operators</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">\n`</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">          color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;aqua&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">        }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        {</span></span>
<span><span style="color: var(--shiki-color-text)">          text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`Uptime: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.floor</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">currentStats</span><span style="color: var(--shiki-color-text)">.uptime </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">1000</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">60</span><span style="color: var(--shiki-color-text)">))</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">m\n`</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">          color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;green&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">        }</span></span>
<span><span style="color: var(--shiki-color-text)">      ]));</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    } </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Error in status command: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">error</span><span style="color: var(--shiki-color-text)">.message</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">api</span><span style="color: var(--shiki-token-function)">.tellraw</span><span style="color: var(--shiki-color-text)">(sender</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">        text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`Error: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">error</span><span style="color: var(--shiki-color-text)">.message</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;red&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">      }));</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  @</span><span style="color: var(--shiki-token-function)">Socket</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;server_info&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getServerInfo</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    params</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    kv</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    auth</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    players</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    isOnline</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ScriptContext</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Verify authentication</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">auth</span><span style="color: var(--shiki-token-function)">.checkPermission</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;player&#39;</span><span style="color: var(--shiki-color-text)">)) {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">          success</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">          error</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Unauthorized&#39;</span></span>
<span><span style="color: var(--shiki-color-text)">        };</span></span>
<span><span style="color: var(--shiki-color-text)">      }</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Get server info</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">info</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">        players</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">players</span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(p </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isOnline</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">p</span><span style="color: var(--shiki-color-text)">.name))</span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(p </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> ({</span></span>
<span><span style="color: var(--shiki-color-text)">          name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">p</span><span style="color: var(--shiki-color-text)">.name</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">          joinTime</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">p</span><span style="color: var(--shiki-color-text)">.joinTime</span></span>
<span><span style="color: var(--shiki-color-text)">        }))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        stats</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">kv</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;server&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;stats&#39;</span><span style="color: var(--shiki-color-text)">])</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(r </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">r</span><span style="color: var(--shiki-color-text)">.value)</span></span>
<span><span style="color: var(--shiki-color-text)">      };</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">        success</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        data</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> info</span></span>
<span><span style="color: var(--shiki-color-text)">      };</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    } </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">        success</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        error</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">error</span><span style="color: var(--shiki-color-text)">.message</span></span>
<span><span style="color: var(--shiki-color-text)">      };</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  @</span><span style="color: var(--shiki-token-function)">Event</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;player_joined&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">handleJoin</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    params</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    messagePlayer</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    broadcastPlayers</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    log</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ScriptContext</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-constant)">playerId</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">playerName</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> params;</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Welcome message</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">messagePlayer</span><span style="color: var(--shiki-color-text)">(playerId</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Welcome to the server!&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">        color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;gold&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        bold</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        sound</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;entity.player.levelup&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">      });</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Broadcast join</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">broadcastPlayers</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">        type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;player_join&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        data</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">          player</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> playerName</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">          timestamp</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Date</span><span style="color: var(--shiki-token-function)">.now</span><span style="color: var(--shiki-color-text)">()</span></span>
<span><span style="color: var(--shiki-color-text)">        }</span></span>
<span><span style="color: var(--shiki-color-text)">      });</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Player </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">playerName</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)"> joined the server`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    } </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Error handling join: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">error</span><span style="color: var(--shiki-color-text)">.message</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>0:["m6CdOmFbkUcxvfzSbSfo9",[[["",{"children":["script-context",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",{"children":["script-context",{"children":["__PAGE__",{},["$L1",["$","article",null,{"className":"flex h-full flex-col pb-10 pt-16","children":[["$","div",null,{"className":"flex-auto prose dark:prose-invert [html_:where(&>*)]:mx-auto [html_:where(&>*)]:max-w-2xl [html_:where(&>*)]:lg:mx-[calc(50%-min(50%,theme(maxWidth.lg)))] [html_:where(&>*)]:lg:max-w-3xl","children":[["$","h1",null,{"children":"Script Context"}],"\n",["$","p",null,{"children":"The ScriptContext object is passed to every module method, providing access to essential APIs and utilities.","className":"lead"}],"\n",["$","$L2",null,{"level":2,"id":"context-structure","children":"Context Structure"}],"\n",["$","p",null,{"children":"The ScriptContext interface provides various tools and utilities:"}],"\n",["$","$L3",null,{"language":"typescript","code":"interface ScriptContext {\n  params: Record<string, unknown>;    // Event/command parameters\n  kv: Deno.Kv;                       // Key-value storage\n  api: MinecraftApi;                 // Minecraft API\n  auth: AuthContext;                 // Authentication utilities\n  log: (message: string) => void;    // Logging function\n  sendToPlayer: (playerId: string, data: unknown) => void;\n  broadcastPlayers: (data: unknown) => void;\n  messagePlayer: (playerId: string, message: string, options?: {\n    color?: string;\n    bold?: boolean;\n    italic?: boolean;\n    underlined?: boolean;\n    sound?: string;\n  }) => Promise<void>;\n  playerManager: PlayerManager;\n  players: PlayerData[];\n  isOnline: (playerName: string) => boolean;\n  isOperator: (playerName: string) => boolean;\n}\n","children":["$","$L4",null,{"className":"language-typescript","children":"$5"}],"title":"ScriptContext Interface"}],"\n",["$","$L2",null,{"level":2,"id":"parameters","children":"Parameters"}],"\n",["$","p",null,{"children":["The ",["$","$L4",null,{"children":"params"}]," object contains event-specific data:"]}],"\n",["$","$L6",null,{"children":[["$","$L3",null,{"language":"typescript","code":"@Command(['example'])\nasync handleCommand({ params }: ScriptContext) {\nconst {\nsender,           // Command sender's name\nargs,             // Command arguments\nsenderType        // Type of sender\n} = params;\n}\n","children":["$","$L4",null,{"className":"language-typescript","children":"$7"}],"title":"Command Parameters"}],["$","$L3",null,{"language":"typescript","code":"@Event('player_joined')\nasync handleJoin({ params }: ScriptContext) {\nconst {\nplayerId,         // Player UUID\nplayerName,       // Player username\nx, y, z,          // Coordinates\ndimension         // World dimension\n} = params;\n}\n","children":["$","$L4",null,{"className":"language-typescript","children":"$8"}],"title":"Event Parameters"}],["$","$L3",null,{"language":"typescript","code":"@Socket('example')\nasync handleSocket({ params }: ScriptContext) {\nconst {\ntoken,            // Authentication token\nsocket,           // WebSocket connection\ndata              // Message data\n} = params;\n}\n","children":["$","$L4",null,{"className":"language-typescript","children":"$9"}],"title":"Socket Parameters"}]]}],"\n",["$","$L2",null,{"level":2,"id":"storage-access","children":"Storage Access"}],"\n",["$","p",null,{"children":["The ",["$","$L4",null,{"children":"kv"}]," property provides access to Deno KV storage:"]}],"\n",["$","$L3",null,{"language":"typescript","code":"@Command(['save'])\nasync saveData({ params, kv }: ScriptContext) {\n  // Read data\n  const data = await kv.get(['key', 'subkey']);\n\n  // Write data\n  await kv.set(['key', 'subkey'], value);\n\n  // Atomic operations\n  const result = await kv.atomic()\n    .check(previousValue)\n    .mutate({\n      type: 'set',\n      key: ['key'],\n      value: newValue\n    })\n    .commit();\n}\n","children":["$","$L4",null,{"className":"language-typescript","children":"$a"}],"title":"Storage Operations"}],"\n",["$","$L2",null,{"level":2,"id":"authentication","children":"Authentication"}],"\n",["$","p",null,{"children":["The ",["$","$L4",null,{"children":"auth"}]," property provides authentication utilities:"]}],"\n",["$","$L3",null,{"language":"typescript","code":"@Socket('verify')\nasync verifyUser({ params, auth }: ScriptContext) {\n  try {\n    // Verify JWT token\n    const payload = await auth.verifyToken(params.token);\n\n    // Check permissions\n    const hasPermission = await auth.checkPermission('player');\n\n    // Get player info\n    const playerId = await auth.getPlayerIdFromName(params.playerName);\n    const playerName = await auth.getPlayerNameFromId(playerId);\n\n    return { success: true, data: payload };\n  } catch (error) {\n    return { success: false, error: error.message };\n  }\n}\n","children":["$","$L4",null,{"className":"language-typescript","children":"$b"}],"title":"Authentication Methods"}],"\n",["$","$L2",null,{"level":2,"id":"player-communication","children":"Player Communication"}],"\n",["$","p",null,{"children":"Methods for communicating with players:"}],"\n",["$","$L3",null,{"language":"typescript","code":"@Event('player_death')\nasync handleDeath({ params, messagePlayer, broadcastPlayers }: ScriptContext) {\n  // Send message to specific player\n  await messagePlayer(params.playerId, \"You died!\", {\n    color: \"red\",\n    bold: true,\n    sound: \"entity.player.death\"\n  });\n\n  // Broadcast to all players\n  broadcastPlayers({\n    type: 'player_died',\n    data: {\n      player: params.playerName,\n      location: {\n        x: params.x,\n        y: params.y,\n        z: params.z\n      }\n    }\n  });\n}\n","children":["$","$L4",null,{"className":"language-typescript","children":"$c"}],"title":"Player Communication"}],"\n",["$","$L2",null,{"level":2,"id":"player-management","children":"Player Management"}],"\n",["$","p",null,{"children":"Player-related utilities:"}],"\n",["$","$L3",null,{"language":"typescript","code":"@Command(['players'])\nasync listPlayers({ players, isOnline, isOperator }: ScriptContext) {\n  // Get all players\n  const playerList = players.map(player => ({\n    name: player.name,\n    online: isOnline(player.name),\n    operator: isOperator(player.name),\n    joinTime: player.joinTime\n  }));\n\n  // Access player manager for more operations\n  const onlinePlayers = players.filter(p => isOnline(p.name));\n}\n","children":["$","$L4",null,{"className":"language-typescript","children":"$d"}],"title":"Player Management"}],"\n",["$","$L2",null,{"level":2,"id":"logging","children":"Logging"}],"\n",["$","p",null,{"children":["The ",["$","$L4",null,{"children":"log"}]," function for debugging and monitoring:"]}],"\n",["$","$L3",null,{"language":"typescript","code":"@Event('player_joined')\nasync handleJoin({ params, log }: ScriptContext) {\n  try {\n    // Basic logging\n    log(`Player joined: ${params.playerName}`);\n\n    // Debug information\n    log('Params:', JSON.stringify(params, null, 2));\n\n  } catch (error) {\n    // Error logging\n    log(`Error: ${error.message}`);\n    log(`Stack: ${error.stack}`);\n  }\n}\n","children":["$","$L4",null,{"className":"language-typescript","children":"$e"}],"title":"Logging Usage"}],"\n",["$","$L2",null,{"level":2,"id":"complete-example","children":"Complete Example"}],"\n",["$","p",null,{"children":"Here's a comprehensive example using various ScriptContext features:"}],"\n",["$","$L3",null,{"language":"typescript","code":"$f","children":["$","$L4",null,{"className":"language-typescript","children":"$10"}],"title":"CompleteModule.ts"}],"\n",["$","div",null,{"className":"not-prose","children":["$","$L11",null,{"className":"inline-flex gap-0.5 justify-center overflow-hidden text-sm font-medium transition text-fuchsia-500 hover:text-fuchsia-600 dark:text-fuchsia-400 dark:hover:text-fuchsia-500","href":"/modules","children":[false,"Learn about Modules",["$","svg",null,{"viewBox":"0 0 20 20","fill":"none","aria-hidden":"true","className":"mt-0.5 h-5 w-5 relative top-px -mr-1","children":["$","path",null,{"stroke":"currentColor","strokeLinecap":"round","strokeLinejoin":"round","d":"m11.5 6.5 3 3.5m0 0-3 3.5m3-3.5h-9"}]}]]}]}]]}],["$","footer",null,{"className":"mx-auto mt-16 w-full max-w-2xl lg:max-w-5xl","children":["$","$L12",null,{}]}]]}],null]]},["$","$L13",null,{"parallelRouterKey":"children","segmentPath":["children","script-context","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L14",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,"$L15",null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cfc91e73f16c955c.css","precedence":"next","crossOrigin":""}]],"$L16"]]]]
16:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Script Context - Enchanted Server Documentation"}],["$","meta","3",{"name":"description","content":"Learn about the ScriptContext object, which provides access to core Enchanted functionalities."}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"48x48"}]]
1:null
17:I[4840,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","536","static/chunks/536-654abe48faf78f66.js","841","static/chunks/841-15946dcd10b62610.js","185","static/chunks/app/layout-4890250a0dcdb7a7.js"],"Providers"]
18:I[8733,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","536","static/chunks/536-654abe48faf78f66.js","841","static/chunks/841-15946dcd10b62610.js","185","static/chunks/app/layout-4890250a0dcdb7a7.js"],"Layout"]
15:["$","html",null,{"lang":"en","className":"h-full","suppressHydrationWarning":true,"children":["$","body",null,{"className":"flex min-h-full bg-white antialiased dark:bg-zinc-900","children":["$","$L17",null,{"children":["$","div",null,{"className":"w-full","children":["$","$L18",null,{"allSections":{"/":[{"title":"What is Enchanted?","id":"what-is-enchanted"},{"title":"Key Features","id":"key-features"},{"title":"Getting Started","id":"getting-started"}],"/authentication":[{"title":"Basic Auth Module","id":"basic-auth-module"},{"title":"Client Usage","id":"client-usage"},{"title":"Permission Levels","id":"permission-levels"},{"title":"Token Structure","id":"token-structure"},{"title":"Secure Storage","id":"secure-storage"},{"title":"Security Best Practices","id":"security-best-practices"},{"title":"Enhanced Implementation","id":"enhanced-implementation"},{"title":"What's next?","id":"whats-next"}],"/commands":[{"title":"Command Basics","id":"command-basics"},{"title":"Command Arguments","id":"command-arguments"},{"title":"Subcommands","id":"subcommands"},{"title":"Command Responses","id":"command-responses"},{"title":"Command Permissions","id":"command-permissions"},{"title":"Command Error Handling","id":"command-error-handling"},{"title":"Complete Example","id":"complete-example"}],"/decorators":[{"title":"Module Decorator","id":"module-decorator"},{"title":"Event Decorator","id":"event-decorator"},{"title":"Command Decorator","id":"command-decorator"},{"title":"Description Decorator","id":"description-decorator"},{"title":"Permission Decorator","id":"permission-decorator"},{"title":"Argument Decorator","id":"argument-decorator"},{"title":"Socket Decorator","id":"socket-decorator"},{"title":"Decorator Combinations","id":"decorator-combinations"},{"title":"Complete Example","id":"complete-example"},{"title":"Argument Types","id":"argument-types"},{"title":"Permission Levels","id":"permission-levels"}],"/development":[{"title":"Development Environment","id":"development-environment"},{"title":"Project Structure","id":"project-structure"},{"title":"Module Development","id":"module-development"},{"title":"Development Server","id":"development-server"},{"title":"Testing Modules","id":"testing-modules"},{"title":"Development Tools","id":"development-tools"},{"title":"Debugging","id":"debugging"},{"title":"Development Configuration","id":"development-configuration"},{"title":"Working with Docker","id":"working-with-docker"},{"title":"Module Hot Reloading","id":"module-hot-reloading"},{"title":"Common Development Tasks","id":"common-development-tasks"},{"title":"Best Practices","id":"best-practices"},{"title":"Module Development Lifecycle","id":"module-development-lifecycle"},{"title":"Example Development Module","id":"example-development-module"}],"/errors":[{"title":"Core Concepts","id":"core-concepts"},{"title":"Command Error Handling","id":"command-error-handling"},{"title":"Socket Error Handling","id":"socket-error-handling"},{"title":"Event Error Handling","id":"event-error-handling"},{"title":"Storage Error Handling","id":"storage-error-handling"},{"title":"Error Types","id":"error-types"},{"title":"Best Practices","id":"best-practices"},{"title":"Complete Example","id":"complete-example"}],"/architecture":[{"title":"System Overview","id":"system-overview"},{"title":"Real-Time Communication","id":"real-time-communication"},{"title":"Module System","id":"module-system"},{"title":"State Management","id":"state-management"},{"title":"Server Components","id":"server-components"},{"title":"Fabric Plugin Integration","id":"fabric-plugin-integration"},{"title":"Security Model","id":"security-model"},{"title":"Data Flow","id":"data-flow"},{"title":"Performance Considerations","id":"performance-considerations"},{"title":"Development Workflow","id":"development-workflow"}],"/events":[{"title":"Event Basics","id":"event-basics"},{"title":"Player Events","id":"player-events"},{"title":"Block Events","id":"block-events"},{"title":"Combat Events","id":"combat-events"},{"title":"Container Events","id":"container-events"},{"title":"Server Events","id":"server-events"},{"title":"Event Handler Patterns","id":"event-handler-patterns"},{"title":"Complete Example","id":"complete-example"}],"/installation":[{"title":"Prerequisites","id":"prerequisites"},{"title":"Environment Setup","id":"environment-setup"},{"title":"Docker Compose Configuration","id":"docker-compose-configuration"},{"title":"Project Configuration","id":"project-configuration"},{"title":"Project Structure","id":"project-structure"},{"title":"Starting the Server","id":"starting-the-server"},{"title":"Verifying Your Installation","id":"verifying-your-installation"},{"title":"Development Commands","id":"development-commands"},{"title":"Troubleshooting Common Issues","id":"troubleshooting-common-issues"}],"/minecraft-api":[{"title":"Basic Commands","id":"basic-commands"},{"title":"Player Management","id":"player-management"},{"title":"World Manipulation","id":"world-manipulation"},{"title":"Scoreboard Management","id":"scoreboard-management"},{"title":"Chat & Messages","id":"chat-and-messages"},{"title":"Player Data","id":"player-data"},{"title":"Complete Example","id":"complete-example"}],"/modules":[{"title":"Basic Module Structure","id":"basic-module-structure"},{"title":"Module Context","id":"module-context"},{"title":"Event Handling","id":"event-handling"},{"title":"Command Registration","id":"command-registration"},{"title":"Socket Communication","id":"socket-communication"},{"title":"State Management","id":"state-management"},{"title":"Module Communication","id":"module-communication"},{"title":"Module Lifecycle","id":"module-lifecycle"},{"title":"Complex Module Example","id":"complex-module-example"}],"/permissions":[{"title":"Permission Levels","id":"permission-levels"},{"title":"Using Permissions","id":"using-permissions"},{"title":"Permission Context","id":"permission-context"},{"title":"Permission Checks","id":"permission-checks"},{"title":"Command Permissions","id":"command-permissions"},{"title":"Socket Handler Permissions","id":"socket-handler-permissions"},{"title":"Error Handling","id":"error-handling"},{"title":"Best Practices","id":"best-practices"},{"title":"Example Module","id":"example-module"}],"/quickstart":[{"title":"Choose your setup","id":"choose-your-setup"},{"title":"Creating your first module","id":"creating-your-first-module"},{"title":"What's next?","id":"whats-next"}],"/storage":[{"title":"Basic Operations","id":"basic-operations"},{"title":"Key Structure","id":"key-structure"},{"title":"Atomic Operations","id":"atomic-operations"},{"title":"Data Models","id":"data-models"},{"title":"Data Management Patterns","id":"data-management-patterns"},{"title":"Complete Example","id":"complete-example"}],"/script-context":[{"title":"Context Structure","id":"context-structure"},{"title":"Parameters","id":"parameters"},{"title":"Storage Access","id":"storage-access"},{"title":"Authentication","id":"authentication"},{"title":"Player Communication","id":"player-communication"},{"title":"Player Management","id":"player-management"},{"title":"Logging","id":"logging"},{"title":"Complete Example","id":"complete-example"}],"/websockets":[{"title":"Socket Basics","id":"socket-basics"},{"title":"Message Structure","id":"message-structure"},{"title":"Authentication","id":"authentication"},{"title":"Real-time Updates","id":"real-time-updates"},{"title":"Client Implementation","id":"client-implementation"},{"title":"Socket State Management","id":"socket-state-management"},{"title":"Complete Example","id":"complete-example"}],"/types":[{"title":"Core Types","id":"core-types"},{"title":"Authentication Types","id":"authentication-types"},{"title":"Decorator Types","id":"decorator-types"},{"title":"API Types","id":"api-types"},{"title":"Event Types","id":"event-types"},{"title":"Storage Types","id":"storage-types"},{"title":"WebSocket Types","id":"web-socket-types"},{"title":"Utility Types","id":"utility-types"},{"title":"Type Usage Example","id":"type-usage-example"}],"/utilities":[{"title":"Rate Limiting","id":"rate-limiting"},{"title":"Message Formatting","id":"message-formatting"},{"title":"Time Utilities","id":"time-utilities"},{"title":"Data Validation","id":"data-validation"},{"title":"Promise Utilities","id":"promise-utilities"},{"title":"Collection Utilities","id":"collection-utilities"},{"title":"Complete Example","id":"complete-example"}],"/examples/chat":[{"title":"Complete Module","id":"complete-module"},{"title":"WebSocket Integration","id":"web-socket-integration"},{"title":"Usage Examples","id":"usage-examples"},{"title":"Key Features","id":"key-features"}],"/examples/economy":[{"title":"Complete Module","id":"complete-module"},{"title":"Key Features","id":"key-features"},{"title":"Usage Examples","id":"usage-examples"},{"title":"Key Concepts","id":"key-concepts"},{"title":"Common Patterns","id":"common-patterns"},{"title":"Extension Ideas","id":"extension-ideas"}],"/examples/player-stats":[{"title":"Complete Module","id":"complete-module"},{"title":"Stats Tracking","id":"stats-tracking"},{"title":"Usage","id":"usage"},{"title":"Event Handling","id":"event-handling"},{"title":"Web Integration","id":"web-integration"},{"title":"Key Features","id":"key-features"}],"/examples/basic-module":[{"title":"Complete Module","id":"complete-module"},{"title":"Module Breakdown","id":"module-breakdown"},{"title":"Usage Examples","id":"usage-examples"},{"title":"Key Concepts Demonstrated","id":"key-concepts-demonstrated"}]},"children":["$","$L13",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L14",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"absolute inset-0 -z-10 mx-0 max-w-none overflow-hidden","children":["$","div",null,{"className":"absolute left-1/2 top-0 ml-[-38rem] h-[25rem] w-[81.25rem] dark:[mask-image:linear-gradient(white,transparent)]","children":[["$","div",null,{"className":"absolute inset-0 bg-gradient-to-r from-[#fff] to-[#fff] opacity-40 [mask-image:radial-gradient(farthest-side_at_top,white,transparent)] dark:from-[#000]/30 dark:to-[#000]/30 dark:opacity-100","children":["$","svg",null,{"aria-hidden":"true","className":"absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5","children":[["$","defs",null,{"children":["$","pattern",null,{"id":":S1:","width":72,"height":56,"patternUnits":"userSpaceOnUse","x":-12,"y":4,"children":["$","path",null,{"d":"M.5 56V.5H72","fill":"none"}]}]}],["$","rect",null,{"width":"100%","height":"100%","strokeWidth":0,"fill":"url(#:S1:)"}],["$","svg",null,{"x":-12,"y":4,"className":"overflow-visible","children":[["$","rect","4-3",{"strokeWidth":"0","width":73,"height":57,"x":288,"y":168}],["$","rect","2-1",{"strokeWidth":"0","width":73,"height":57,"x":144,"y":56}],["$","rect","7-3",{"strokeWidth":"0","width":73,"height":57,"x":504,"y":168}],["$","rect","10-6",{"strokeWidth":"0","width":73,"height":57,"x":720,"y":336}]]}]]}]}],["$","svg",null,{"viewBox":"0 0 1113 440","aria-hidden":"true","className":"absolute left-1/2 top-0 ml-[-19rem] w-[69.5625rem] fill-white blur-[26px] dark:hidden","children":["$","path",null,{"d":"M.016 439.5s-9.5-300 434-300S882.516 20 882.516 20V0h230.004v439.5H.016Z"}]}]]}]}],["$","div",null,{"className":"mx-auto flex h-full max-w-xl flex-col items-center justify-center py-16 text-center","children":[["$","p",null,{"className":" text-5xl font-semibold text-zinc-900 dark:text-white","children":"404"}],["$","h1",null,{"className":"mt-2 text-2xl font-bold text-zinc-900 dark:text-white","children":"Page not found"}],["$","p",null,{"className":"mt-2 text-base text-zinc-600 dark:text-zinc-400","children":"Sorry, we couldn’t find the page you’re looking for."}],["$","$L11",null,{"className":"inline-flex gap-0.5 justify-center overflow-hidden text-sm font-medium transition rounded-sm bg-zinc-900 py-1 px-3 text-white hover:bg-zinc-700 dark:bg-fuchsia-400/10 dark:text-fuchsia-400 dark:ring-1 dark:ring-inset dark:ring-fuchsia-400/20 dark:hover:bg-fuchsia-400/10 dark:hover:text-fuchsia-300 dark:hover:ring-fuchsia-300 mt-8","href":"/","children":[false,"Back to docs",["$","svg",null,{"viewBox":"0 0 20 20","fill":"none","aria-hidden":"true","className":"mt-0.5 h-5 w-5 -mr-1","children":["$","path",null,{"stroke":"currentColor","strokeLinecap":"round","strokeLinejoin":"round","d":"m11.5 6.5 3 3.5m0 0-3 3.5m3-3.5h-9"}]}]]}]]}]],"notFoundStyles":[],"styles":null}]}]}]}]}]}]
