2:I[5824,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","841","static/chunks/841-15946dcd10b62610.js","965","static/chunks/app/utilities/page-62510e63facff6d5.js"],"Heading"]
3:I[3801,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","841","static/chunks/841-15946dcd10b62610.js","965","static/chunks/app/utilities/page-62510e63facff6d5.js"],"Pre"]
4:I[3801,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","841","static/chunks/841-15946dcd10b62610.js","965","static/chunks/app/utilities/page-62510e63facff6d5.js"],"Code"]
6:I[3801,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","841","static/chunks/841-15946dcd10b62610.js","965","static/chunks/app/utilities/page-62510e63facff6d5.js"],"CodeGroup"]
f:I[5250,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","841","static/chunks/841-15946dcd10b62610.js","965","static/chunks/app/utilities/page-62510e63facff6d5.js"],""]
10:I[4052,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","841","static/chunks/841-15946dcd10b62610.js","965","static/chunks/app/utilities/page-62510e63facff6d5.js"],"Feedback"]
11:I[5613,[],""]
12:I[1778,[],""]
5:T1b81,<span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">RateLimiter</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Set rate limit for method</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">setMethodCost</span><span style="color: var(--shiki-color-text)">(method</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cost</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Check rate limit</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">handleSocketRateLimit</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">    ip</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    method</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    userRole</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;guest&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;player&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;operator&#39;</span></span>
<span><span style="color: var(--shiki-color-text)">  )</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Promise</span><span style="color: var(--shiki-color-text)">&lt;{</span></span>
<span><span style="color: var(--shiki-color-text)">    allowed</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">    error</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">  }&gt;;</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Usage example</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">rateLimiter</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">RateLimiter</span><span style="color: var(--shiki-color-text)">(kv);</span></span>
<span><span style="color: var(--shiki-token-constant)">rateLimiter</span><span style="color: var(--shiki-token-function)">.setMethodCost</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;custom_command_executed&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-token-constant)">rateLimiter</span><span style="color: var(--shiki-token-function)">.setMethodCost</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;auth&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Check rate limit</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">rateLimiter</span><span style="color: var(--shiki-token-function)">.handleSocketRateLimit</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">  clientIp</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;auth&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;player&#39;</span></span>
<span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>7:T1c7a,<span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">formatChatMessage</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">message</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">options</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">color</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">bold</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">italic</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">underlined</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">clickEvent</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">action</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">value</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">};</span></span>
<span><span style="color: var(--shiki-color-text)">hoverEvent</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">action</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">value</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">};</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> message</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">options</span></span>
<span><span style="color: var(--shiki-color-text)">});</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Usage</span></span>
<span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">api</span><span style="color: var(--shiki-token-function)">.tellraw</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">playerName</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-token-function)">formatChatMessage</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Click me!&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;gold&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">bold</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">clickEvent</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">action</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;run_command&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">value</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/help&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span><span style="color: var(--shiki-color-text)">})</span></span>
<span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>8:T1588,<span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">formatMultiMessage</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">parts</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Array</span><span style="color: var(--shiki-color-text)">&lt;{</span></span>
<span><span style="color: var(--shiki-color-text)">text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">color</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">bold</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">italic</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">}&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(parts);</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Usage</span></span>
<span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">api</span><span style="color: var(--shiki-token-function)">.tellraw</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">playerName</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-token-function)">formatMultiMessage</span><span style="color: var(--shiki-color-text)">([</span></span>
<span><span style="color: var(--shiki-color-text)">{ text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Welcome &quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;gold&quot;</span><span style="color: var(--shiki-color-text)"> }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">{ text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> playerName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;aqua&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bold</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">{ text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;!&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;gold&quot;</span><span style="color: var(--shiki-color-text)"> }</span></span>
<span><span style="color: var(--shiki-color-text)">])</span></span>
<span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>9:T4511,<span><span style="color: var(--shiki-token-comment)">// Format duration</span></span>
<span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">formatDuration</span><span style="color: var(--shiki-color-text)">(ms</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">seconds</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.floor</span><span style="color: var(--shiki-color-text)">((ms </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1000</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">60</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">minutes</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.floor</span><span style="color: var(--shiki-color-text)">((ms </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">1000</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">60</span><span style="color: var(--shiki-color-text)">)) </span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">60</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">hours</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.floor</span><span style="color: var(--shiki-color-text)">((ms </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">1000</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">60</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">60</span><span style="color: var(--shiki-color-text)">)) </span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">24</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">days</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.floor</span><span style="color: var(--shiki-color-text)">(ms </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">1000</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">60</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">60</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">24</span><span style="color: var(--shiki-color-text)">));</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">parts</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (days </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-constant)">parts</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">days</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">d`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (hours </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-constant)">parts</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">hours</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">h`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (minutes </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-constant)">parts</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">minutes</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">m`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (seconds </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-constant)">parts</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">seconds</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">s`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">parts</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Format timestamp</span></span>
<span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">formatTimestamp</span><span style="color: var(--shiki-color-text)">(date</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Date</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">d</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Date</span><span style="color: var(--shiki-color-text)">(date);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">d</span><span style="color: var(--shiki-token-function)">.toLocaleString</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Usage example</span></span>
<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Command</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;playtime&#39;</span><span style="color: var(--shiki-color-text)">])</span></span>
<span><span style="color: var(--shiki-color-text)">async </span><span style="color: var(--shiki-token-function)">checkPlaytime</span><span style="color: var(--shiki-color-text)">({ params</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> kv</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> api }: ScriptContext) {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">stats</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">kv</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;player&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">params</span><span style="color: var(--shiki-color-text)">.sender</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;stats&#39;</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">playtime</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">stats</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)">?.playtime </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">api</span><span style="color: var(--shiki-token-function)">.tellraw</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">params</span><span style="color: var(--shiki-color-text)">.sender</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`Your playtime: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-function)">formatDuration</span><span style="color: var(--shiki-color-text)">(playtime)</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;gold&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">  }));</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>a:T24bc,<span><span style="color: var(--shiki-token-comment)">// Validate username</span></span>
<span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isValidUsername</span><span style="color: var(--shiki-color-text)">(username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-token-string-expression)"> /</span><span style="color: var(--shiki-token-keyword)">^</span><span style="color: var(--shiki-token-string-expression)">[a-zA-Z0-9_]</span><span style="color: var(--shiki-token-keyword)">{2,16}$</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-function)">.test</span><span style="color: var(--shiki-color-text)">(username);</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Validate amount</span></span>
<span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isValidAmount</span><span style="color: var(--shiki-color-text)">(amount</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Number</span><span style="color: var(--shiki-token-function)">.isInteger</span><span style="color: var(--shiki-color-text)">(amount) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> amount </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Validate coordinates</span></span>
<span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isValidLocation</span><span style="color: var(--shiki-color-text)">(x</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> y</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> z</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-function)">isNaN</span><span style="color: var(--shiki-color-text)">(x) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-function)">isNaN</span><span style="color: var(--shiki-color-text)">(y) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-function)">isNaN</span><span style="color: var(--shiki-color-text)">(z);</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Usage example</span></span>
<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Command</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;give&#39;</span><span style="color: var(--shiki-color-text)">])</span></span>
<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Permission</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;operator&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">async </span><span style="color: var(--shiki-token-function)">giveItems</span><span style="color: var(--shiki-color-text)">({ params</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> api }: ScriptContext) {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-constant)">sender</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">args</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> params;</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-function)">isValidUsername</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">args</span><span style="color: var(--shiki-color-text)">.player)) {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Invalid player name&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-function)">isValidAmount</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">args</span><span style="color: var(--shiki-color-text)">.amount)) {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Invalid amount&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>b:T27cd,<span><span style="color: var(--shiki-token-comment)">// Delay execution</span></span>
<span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">delay</span><span style="color: var(--shiki-color-text)">(ms</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Promise</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-constant)">void</span><span style="color: var(--shiki-color-text)">&gt; {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Promise</span><span style="color: var(--shiki-color-text)">(resolve </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(resolve</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ms));</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Retry operation</span></span>
<span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-color-text)">&gt;(</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">operation</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Promise</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-color-text)">&gt;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  attempts</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  delayMs</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1000</span></span>
<span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Promise</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-color-text)">&gt; {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> lastError</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Error</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> attempts; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">operation</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">    } </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) {</span></span>
<span><span style="color: var(--shiki-color-text)">      lastError </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> error;</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> attempts </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">delay</span><span style="color: var(--shiki-color-text)">(delayMs);</span></span>
<span><span style="color: var(--shiki-color-text)">      }</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> lastError;</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Usage example</span></span>
<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Event</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;player_joined&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">async </span><span style="color: var(--shiki-token-function)">handleJoin</span><span style="color: var(--shiki-color-text)">({ params</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> api }: ScriptContext) {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Retry welcome message if it fails</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">api</span><span style="color: var(--shiki-token-function)">.tellraw</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">params</span><span style="color: var(--shiki-color-text)">.playerName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Welcome!&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  });</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>c:T3128,<span><span style="color: var(--shiki-token-comment)">// Chunk array</span></span>
<span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">chunk</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-color-text)">&gt;(array</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-color-text)">[]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> size</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-color-text)">[][] {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">({ length</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.ceil</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> size) }</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (_</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> i) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(i </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> size</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> size </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> size)</span></span>
<span><span style="color: var(--shiki-color-text)">  );</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Random element</span></span>
<span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">randomElement</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-color-text)">&gt;(array</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-color-text)">[])</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> array[</span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.floor</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.random</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">)];</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Group by</span></span>
<span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">groupBy</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-color-text)">&gt;(</span></span>
<span><span style="color: var(--shiki-color-text)">  array</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-color-text)">[]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  key</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">keyof</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">T</span></span>
<span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Record</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-color-text)">[]&gt; {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.reduce</span><span style="color: var(--shiki-color-text)">((groups</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> item) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">String</span><span style="color: var(--shiki-color-text)">(item[key]);</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">groups</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      [value]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">(groups[value] </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> [])</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> item]</span></span>
<span><span style="color: var(--shiki-color-text)">    };</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> {} </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Record</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-color-text)">[]&gt;);</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Usage example</span></span>
<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Command</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;list&#39;</span><span style="color: var(--shiki-color-text)">])</span></span>
<span><span style="color: var(--shiki-color-text)">async </span><span style="color: var(--shiki-token-function)">listPlayers</span><span style="color: var(--shiki-color-text)">({ players</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> api }: ScriptContext) {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Group players by role</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">grouped</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">groupBy</span><span style="color: var(--shiki-color-text)">(players</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;role&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Display in chunks</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">chunk</span><span style="color: var(--shiki-color-text)">(players</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>d:T6c8,@Module({
  name: 'UtilityModule',
  version: '1.0.0'
})
export class UtilityModule {
  private rateLimiter: RateLimiter;

  constructor() {
    this.rateLimiter = new RateLimiter(kv);
    this.rateLimiter.setMethodCost('stats', 2);
  }

  @Command(['stats'])
  @Permission('player')
  async showStats({ params, kv, api }: ScriptContext) {
    const { sender } = params;

    try {
      // Check rate limit
      const rateLimit = await this.rateLimiter
        .handleSocketRateLimit(params.ip, 'stats', 'player');

      if (!rateLimit.allowed) {
        throw new Error('Rate limit exceeded');
      }

      // Get player stats
      const stats = await retry(async () => {
        const result = await kv.get(['player', sender, 'stats']);
        return result.value;
      });

      // Format message
      await api.tellraw(sender, formatMultiMessage([
        { text: "=== Stats ===\n", color: "gold", bold: true },
        { text: `Playtime: ${formatDuration(stats.playtime)}\n`, color: "yellow" },
        { text: `Last seen: ${formatTimestamp(stats.lastSeen)}`, color: "gray" }
      ]));

    } catch (error) {
      await api.tellraw(sender, formatChatMessage(
        `Error: ${error.message}`,
        { color: "red" }
      ));
    }
  }

  @Event('player_joined')
  async handleJoin({ params, api }: ScriptContext) {
    const { playerName } = params;

    // Validate username
    if (!isValidUsername(playerName)) {
      return;
    }

    // Send welcome message with delay
    await delay(100);
    await api.tellraw(playerName, formatMultiMessage([
      { text: "Welcome ", color: "gold" },
      { text: playerName, color: "aqua", bold: true },
      { text: " to the server!", color: "gold" }
    ]));
  }
}
e:T5603,<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">  name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;UtilityModule&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  version</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;1.0.0&#39;</span></span>
<span><span style="color: var(--shiki-color-text)">})</span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">UtilityModule</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">private</span><span style="color: var(--shiki-color-text)"> rateLimiter</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">RateLimiter</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">() {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.rateLimiter </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">RateLimiter</span><span style="color: var(--shiki-color-text)">(kv);</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">rateLimiter</span><span style="color: var(--shiki-token-function)">.setMethodCost</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;stats&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  @</span><span style="color: var(--shiki-token-function)">Command</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;stats&#39;</span><span style="color: var(--shiki-color-text)">])</span></span>
<span><span style="color: var(--shiki-color-text)">  @</span><span style="color: var(--shiki-token-function)">Permission</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;player&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">showStats</span><span style="color: var(--shiki-color-text)">({ params</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> kv</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> api }</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ScriptContext</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-constant)">sender</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> params;</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Check rate limit</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">rateLimit</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.rateLimiter</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">.handleSocketRateLimit</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">params</span><span style="color: var(--shiki-color-text)">.ip</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;stats&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;player&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">rateLimit</span><span style="color: var(--shiki-color-text)">.allowed) {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Rate limit exceeded&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">      }</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Get player stats</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">stats</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">kv</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;player&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sender</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;stats&#39;</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)">.value;</span></span>
<span><span style="color: var(--shiki-color-text)">      });</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Format message</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">api</span><span style="color: var(--shiki-token-function)">.tellraw</span><span style="color: var(--shiki-color-text)">(sender</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">formatMultiMessage</span><span style="color: var(--shiki-color-text)">([</span></span>
<span><span style="color: var(--shiki-color-text)">        { text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;=== Stats ===\n&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;gold&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bold</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        { text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`Playtime: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-function)">formatDuration</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">stats</span><span style="color: var(--shiki-color-text)">.playtime)</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">\n`</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;yellow&quot;</span><span style="color: var(--shiki-color-text)"> }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        { text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`Last seen: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-function)">formatTimestamp</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">stats</span><span style="color: var(--shiki-color-text)">.lastSeen)</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;gray&quot;</span><span style="color: var(--shiki-color-text)"> }</span></span>
<span><span style="color: var(--shiki-color-text)">      ]));</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    } </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">api</span><span style="color: var(--shiki-token-function)">.tellraw</span><span style="color: var(--shiki-color-text)">(sender</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">formatChatMessage</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-string-expression)">`Error: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">error</span><span style="color: var(--shiki-color-text)">.message</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        { color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;red&quot;</span><span style="color: var(--shiki-color-text)"> }</span></span>
<span><span style="color: var(--shiki-color-text)">      ));</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  @</span><span style="color: var(--shiki-token-function)">Event</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;player_joined&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">handleJoin</span><span style="color: var(--shiki-color-text)">({ params</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> api }</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ScriptContext</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-constant)">playerName</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> params;</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Validate username</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-function)">isValidUsername</span><span style="color: var(--shiki-color-text)">(playerName)) {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Send welcome message with delay</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">delay</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">100</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">api</span><span style="color: var(--shiki-token-function)">.tellraw</span><span style="color: var(--shiki-color-text)">(playerName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">formatMultiMessage</span><span style="color: var(--shiki-color-text)">([</span></span>
<span><span style="color: var(--shiki-color-text)">      { text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Welcome &quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;gold&quot;</span><span style="color: var(--shiki-color-text)"> }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      { text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> playerName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;aqua&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bold</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      { text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot; to the server!&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;gold&quot;</span><span style="color: var(--shiki-color-text)"> }</span></span>
<span><span style="color: var(--shiki-color-text)">    ]));</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>0:["m6CdOmFbkUcxvfzSbSfo9",[[["",{"children":["utilities",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",{"children":["utilities",{"children":["__PAGE__",{},["$L1",["$","article",null,{"className":"flex h-full flex-col pb-10 pt-16","children":[["$","div",null,{"className":"flex-auto prose dark:prose-invert [html_:where(&>*)]:mx-auto [html_:where(&>*)]:max-w-2xl [html_:where(&>*)]:lg:mx-[calc(50%-min(50%,theme(maxWidth.lg)))] [html_:where(&>*)]:lg:max-w-3xl","children":[["$","h1",null,{"children":"Utilities"}],"\n",["$","p",null,{"children":"Enchanted provides various utility functions to simplify common tasks in your modules.","className":"lead"}],"\n",["$","$L2",null,{"level":2,"id":"rate-limiting","children":"Rate Limiting"}],"\n",["$","p",null,{"children":"Utilities for managing request rates:"}],"\n",["$","$L3",null,{"language":"typescript","code":"class RateLimiter {\n  // Set rate limit for method\n  setMethodCost(method: string, cost: number);\n\n  // Check rate limit\n  async handleSocketRateLimit(\n    ip: string,\n    method: string,\n    userRole: 'guest' | 'player' | 'operator'\n  ): Promise<{\n    allowed: boolean;\n    error?: string;\n  }>;\n}\n\n// Usage example\nconst rateLimiter = new RateLimiter(kv);\nrateLimiter.setMethodCost('custom_command_executed', 5);\nrateLimiter.setMethodCost('auth', 3);\n\n// Check rate limit\nconst result = await rateLimiter.handleSocketRateLimit(\n  clientIp,\n  'auth',\n  'player'\n);\n","children":["$","$L4",null,{"className":"language-typescript","children":"$5"}],"title":"RateLimiter"}],"\n",["$","$L2",null,{"level":2,"id":"message-formatting","children":"Message Formatting"}],"\n",["$","p",null,{"children":"Helper functions for formatting messages:"}],"\n",["$","$L6",null,{"children":[["$","$L3",null,{"language":"typescript","code":"function formatChatMessage(\nmessage: string,\noptions: {\ncolor?: string;\nbold?: boolean;\nitalic?: boolean;\nunderlined?: boolean;\nclickEvent?: {\naction: string;\nvalue: string;\n};\nhoverEvent?: {\naction: string;\nvalue: string;\n};\n}\n): string {\nreturn JSON.stringify({\ntext: message,\n...options\n});\n}\n\n// Usage\nawait api.tellraw(\nplayerName,\nformatChatMessage(\"Click me!\", {\ncolor: \"gold\",\nbold: true,\nclickEvent: {\naction: \"run_command\",\nvalue: \"/help\"\n}\n})\n);\n","children":["$","$L4",null,{"className":"language-typescript","children":"$7"}],"title":"Chat Messages"}],["$","$L3",null,{"language":"typescript","code":"function formatMultiMessage(\nparts: Array<{\ntext: string;\ncolor?: string;\nbold?: boolean;\nitalic?: boolean;\n}>\n): string {\nreturn JSON.stringify(parts);\n}\n\n// Usage\nawait api.tellraw(\nplayerName,\nformatMultiMessage([\n{ text: \"Welcome \", color: \"gold\" },\n{ text: playerName, color: \"aqua\", bold: true },\n{ text: \"!\", color: \"gold\" }\n])\n);\n","children":["$","$L4",null,{"className":"language-typescript","children":"$8"}],"title":"Complex Messages"}]]}],"\n",["$","$L2",null,{"level":2,"id":"time-utilities","children":"Time Utilities"}],"\n",["$","p",null,{"children":"Functions for handling time and durations:"}],"\n",["$","$L3",null,{"language":"typescript","code":"// Format duration\nfunction formatDuration(ms: number): string {\n  const seconds = Math.floor((ms / 1000) % 60);\n  const minutes = Math.floor((ms / (1000 * 60)) % 60);\n  const hours = Math.floor((ms / (1000 * 60 * 60)) % 24);\n  const days = Math.floor(ms / (1000 * 60 * 60 * 24));\n\n  const parts = [];\n  if (days > 0) parts.push(`${days}d`);\n  if (hours > 0) parts.push(`${hours}h`);\n  if (minutes > 0) parts.push(`${minutes}m`);\n  if (seconds > 0) parts.push(`${seconds}s`);\n\n  return parts.join(' ');\n}\n\n// Format timestamp\nfunction formatTimestamp(date: Date | string): string {\n  const d = new Date(date);\n  return d.toLocaleString();\n}\n\n// Usage example\n@Command(['playtime'])\nasync checkPlaytime({ params, kv, api }: ScriptContext) {\n  const stats = await kv.get(['player', params.sender, 'stats']);\n  const playtime = stats.value?.playtime || 0;\n\n  await api.tellraw(params.sender, JSON.stringify({\n    text: `Your playtime: ${formatDuration(playtime)}`,\n    color: \"gold\"\n  }));\n}\n","children":["$","$L4",null,{"className":"language-typescript","children":"$9"}],"title":"Time Utilities"}],"\n",["$","$L2",null,{"level":2,"id":"data-validation","children":"Data Validation"}],"\n",["$","p",null,{"children":"Helper functions for validating data:"}],"\n",["$","$L3",null,{"language":"typescript","code":"// Validate username\nfunction isValidUsername(username: string): boolean {\n  return /^[a-zA-Z0-9_]{2,16}$/.test(username);\n}\n\n// Validate amount\nfunction isValidAmount(amount: number): boolean {\n  return Number.isInteger(amount) && amount > 0;\n}\n\n// Validate coordinates\nfunction isValidLocation(x: number, y: number, z: number): boolean {\n  return !isNaN(x) && !isNaN(y) && !isNaN(z);\n}\n\n// Usage example\n@Command(['give'])\n@Permission('operator')\nasync giveItems({ params, api }: ScriptContext) {\n  const { sender, args } = params;\n\n  if (!isValidUsername(args.player)) {\n    throw new Error('Invalid player name');\n  }\n\n  if (!isValidAmount(args.amount)) {\n    throw new Error('Invalid amount');\n  }\n}\n","children":["$","$L4",null,{"className":"language-typescript","children":"$a"}],"title":"Validation Utilities"}],"\n",["$","$L2",null,{"level":2,"id":"promise-utilities","children":"Promise Utilities"}],"\n",["$","p",null,{"children":"Helpers for working with async operations:"}],"\n",["$","$L3",null,{"language":"typescript","code":"// Delay execution\nfunction delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// Retry operation\nasync function retry<T>(\n  operation: () => Promise<T>,\n  attempts: number = 3,\n  delayMs: number = 1000\n): Promise<T> {\n  let lastError: Error;\n\n  for (let i = 0; i < attempts; i++) {\n    try {\n      return await operation();\n    } catch (error) {\n      lastError = error;\n      if (i < attempts - 1) {\n        await delay(delayMs);\n      }\n    }\n  }\n\n  throw lastError;\n}\n\n// Usage example\n@Event('player_joined')\nasync handleJoin({ params, api }: ScriptContext) {\n  // Retry welcome message if it fails\n  await retry(async () => {\n    await api.tellraw(params.playerName, \"Welcome!\");\n  });\n}\n","children":["$","$L4",null,{"className":"language-typescript","children":"$b"}],"title":"Promise Utilities"}],"\n",["$","$L2",null,{"level":2,"id":"collection-utilities","children":"Collection Utilities"}],"\n",["$","p",null,{"children":"Helpers for working with collections:"}],"\n",["$","$L3",null,{"language":"typescript","code":"// Chunk array\nfunction chunk<T>(array: T[], size: number): T[][] {\n  return Array.from({ length: Math.ceil(array.length / size) }, (_, i) =>\n    array.slice(i * size, i * size + size)\n  );\n}\n\n// Random element\nfunction randomElement<T>(array: T[]): T {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\n// Group by\nfunction groupBy<T>(\n  array: T[],\n  key: keyof T\n): Record<string, T[]> {\n  return array.reduce((groups, item) => {\n    const value = String(item[key]);\n    return {\n      ...groups,\n      [value]: [...(groups[value] || []), item]\n    };\n  }, {} as Record<string, T[]>);\n}\n\n// Usage example\n@Command(['list'])\nasync listPlayers({ players, api }: ScriptContext) {\n  // Group players by role\n  const grouped = groupBy(players, 'role');\n\n  // Display in chunks\n  const chunks = chunk(players, 10);\n}\n","children":["$","$L4",null,{"className":"language-typescript","children":"$c"}],"title":"Collection Utilities"}],"\n",["$","$L2",null,{"level":2,"id":"complete-example","children":"Complete Example"}],"\n",["$","p",null,{"children":"Here's a module using various utilities:"}],"\n",["$","$L3",null,{"language":"typescript","code":"$d","children":["$","$L4",null,{"className":"language-typescript","children":"$e"}],"title":"UtilityModule.ts"}],"\n",["$","div",null,{"className":"not-prose","children":["$","$Lf",null,{"className":"inline-flex gap-0.5 justify-center overflow-hidden text-sm font-medium transition text-fuchsia-500 hover:text-fuchsia-600 dark:text-fuchsia-400 dark:hover:text-fuchsia-500","href":"/modules","children":[false,"Learn about Modules",["$","svg",null,{"viewBox":"0 0 20 20","fill":"none","aria-hidden":"true","className":"mt-0.5 h-5 w-5 relative top-px -mr-1","children":["$","path",null,{"stroke":"currentColor","strokeLinecap":"round","strokeLinejoin":"round","d":"m11.5 6.5 3 3.5m0 0-3 3.5m3-3.5h-9"}]}]]}]}]]}],["$","footer",null,{"className":"mx-auto mt-16 w-full max-w-2xl lg:max-w-5xl","children":["$","$L10",null,{}]}]]}],null]]},["$","$L11",null,{"parallelRouterKey":"children","segmentPath":["children","utilities","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L12",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,"$L13",null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cfc91e73f16c955c.css","precedence":"next","crossOrigin":""}]],"$L14"]]]]
14:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Utilities - Enchanted Server Documentation"}],["$","meta","3",{"name":"description","content":"Learn about the utility functions and helper methods available in Enchanted."}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"48x48"}]]
1:null
15:I[4840,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","536","static/chunks/536-654abe48faf78f66.js","841","static/chunks/841-15946dcd10b62610.js","185","static/chunks/app/layout-4890250a0dcdb7a7.js"],"Providers"]
16:I[8733,["250","static/chunks/250-86e445a1e316c17d.js","371","static/chunks/371-9fd983c6f9223e2a.js","536","static/chunks/536-654abe48faf78f66.js","841","static/chunks/841-15946dcd10b62610.js","185","static/chunks/app/layout-4890250a0dcdb7a7.js"],"Layout"]
13:["$","html",null,{"lang":"en","className":"h-full","suppressHydrationWarning":true,"children":["$","body",null,{"className":"flex min-h-full bg-white antialiased dark:bg-zinc-900","children":["$","$L15",null,{"children":["$","div",null,{"className":"w-full","children":["$","$L16",null,{"allSections":{"/":[{"title":"What is Enchanted?","id":"what-is-enchanted"},{"title":"Key Features","id":"key-features"},{"title":"Getting Started","id":"getting-started"}],"/architecture":[{"title":"System Overview","id":"system-overview"},{"title":"Real-Time Communication","id":"real-time-communication"},{"title":"Module System","id":"module-system"},{"title":"State Management","id":"state-management"},{"title":"Server Components","id":"server-components"},{"title":"Fabric Plugin Integration","id":"fabric-plugin-integration"},{"title":"Security Model","id":"security-model"},{"title":"Data Flow","id":"data-flow"},{"title":"Performance Considerations","id":"performance-considerations"},{"title":"Development Workflow","id":"development-workflow"}],"/commands":[{"title":"Command Basics","id":"command-basics"},{"title":"Command Arguments","id":"command-arguments"},{"title":"Subcommands","id":"subcommands"},{"title":"Command Responses","id":"command-responses"},{"title":"Command Permissions","id":"command-permissions"},{"title":"Command Error Handling","id":"command-error-handling"},{"title":"Complete Example","id":"complete-example"}],"/decorators":[{"title":"Module Decorator","id":"module-decorator"},{"title":"Event Decorator","id":"event-decorator"},{"title":"Command Decorator","id":"command-decorator"},{"title":"Description Decorator","id":"description-decorator"},{"title":"Permission Decorator","id":"permission-decorator"},{"title":"Argument Decorator","id":"argument-decorator"},{"title":"Socket Decorator","id":"socket-decorator"},{"title":"Decorator Combinations","id":"decorator-combinations"},{"title":"Complete Example","id":"complete-example"},{"title":"Argument Types","id":"argument-types"},{"title":"Permission Levels","id":"permission-levels"}],"/development":[{"title":"Development Environment","id":"development-environment"},{"title":"Project Structure","id":"project-structure"},{"title":"Module Development","id":"module-development"},{"title":"Development Server","id":"development-server"},{"title":"Testing Modules","id":"testing-modules"},{"title":"Development Tools","id":"development-tools"},{"title":"Debugging","id":"debugging"},{"title":"Development Configuration","id":"development-configuration"},{"title":"Working with Docker","id":"working-with-docker"},{"title":"Module Hot Reloading","id":"module-hot-reloading"},{"title":"Common Development Tasks","id":"common-development-tasks"},{"title":"Best Practices","id":"best-practices"},{"title":"Module Development Lifecycle","id":"module-development-lifecycle"},{"title":"Example Development Module","id":"example-development-module"}],"/events":[{"title":"Event Basics","id":"event-basics"},{"title":"Player Events","id":"player-events"},{"title":"Block Events","id":"block-events"},{"title":"Combat Events","id":"combat-events"},{"title":"Container Events","id":"container-events"},{"title":"Server Events","id":"server-events"},{"title":"Event Handler Patterns","id":"event-handler-patterns"},{"title":"Complete Example","id":"complete-example"}],"/installation":[{"title":"Prerequisites","id":"prerequisites"},{"title":"Environment Setup","id":"environment-setup"},{"title":"Docker Compose Configuration","id":"docker-compose-configuration"},{"title":"Project Configuration","id":"project-configuration"},{"title":"Project Structure","id":"project-structure"},{"title":"Starting the Server","id":"starting-the-server"},{"title":"Verifying Your Installation","id":"verifying-your-installation"},{"title":"Development Commands","id":"development-commands"},{"title":"Troubleshooting Common Issues","id":"troubleshooting-common-issues"}],"/minecraft-api":[{"title":"Basic Commands","id":"basic-commands"},{"title":"Player Management","id":"player-management"},{"title":"World Manipulation","id":"world-manipulation"},{"title":"Scoreboard Management","id":"scoreboard-management"},{"title":"Chat & Messages","id":"chat-and-messages"},{"title":"Player Data","id":"player-data"},{"title":"Complete Example","id":"complete-example"}],"/errors":[{"title":"Core Concepts","id":"core-concepts"},{"title":"Command Error Handling","id":"command-error-handling"},{"title":"Socket Error Handling","id":"socket-error-handling"},{"title":"Event Error Handling","id":"event-error-handling"},{"title":"Storage Error Handling","id":"storage-error-handling"},{"title":"Error Types","id":"error-types"},{"title":"Best Practices","id":"best-practices"},{"title":"Complete Example","id":"complete-example"}],"/authentication":[{"title":"Basic Auth Module","id":"basic-auth-module"},{"title":"Client Usage","id":"client-usage"},{"title":"Permission Levels","id":"permission-levels"},{"title":"Token Structure","id":"token-structure"},{"title":"Secure Storage","id":"secure-storage"},{"title":"Security Best Practices","id":"security-best-practices"},{"title":"Enhanced Implementation","id":"enhanced-implementation"},{"title":"What's next?","id":"whats-next"}],"/modules":[{"title":"Basic Module Structure","id":"basic-module-structure"},{"title":"Module Context","id":"module-context"},{"title":"Event Handling","id":"event-handling"},{"title":"Command Registration","id":"command-registration"},{"title":"Socket Communication","id":"socket-communication"},{"title":"State Management","id":"state-management"},{"title":"Module Communication","id":"module-communication"},{"title":"Module Lifecycle","id":"module-lifecycle"},{"title":"Complex Module Example","id":"complex-module-example"}],"/permissions":[{"title":"Permission Levels","id":"permission-levels"},{"title":"Using Permissions","id":"using-permissions"},{"title":"Permission Context","id":"permission-context"},{"title":"Permission Checks","id":"permission-checks"},{"title":"Command Permissions","id":"command-permissions"},{"title":"Socket Handler Permissions","id":"socket-handler-permissions"},{"title":"Error Handling","id":"error-handling"},{"title":"Best Practices","id":"best-practices"},{"title":"Example Module","id":"example-module"}],"/storage":[{"title":"Basic Operations","id":"basic-operations"},{"title":"Key Structure","id":"key-structure"},{"title":"Atomic Operations","id":"atomic-operations"},{"title":"Data Models","id":"data-models"},{"title":"Data Management Patterns","id":"data-management-patterns"},{"title":"Complete Example","id":"complete-example"}],"/types":[{"title":"Core Types","id":"core-types"},{"title":"Authentication Types","id":"authentication-types"},{"title":"Decorator Types","id":"decorator-types"},{"title":"API Types","id":"api-types"},{"title":"Event Types","id":"event-types"},{"title":"Storage Types","id":"storage-types"},{"title":"WebSocket Types","id":"web-socket-types"},{"title":"Utility Types","id":"utility-types"},{"title":"Type Usage Example","id":"type-usage-example"}],"/utilities":[{"title":"Rate Limiting","id":"rate-limiting"},{"title":"Message Formatting","id":"message-formatting"},{"title":"Time Utilities","id":"time-utilities"},{"title":"Data Validation","id":"data-validation"},{"title":"Promise Utilities","id":"promise-utilities"},{"title":"Collection Utilities","id":"collection-utilities"},{"title":"Complete Example","id":"complete-example"}],"/script-context":[{"title":"Context Structure","id":"context-structure"},{"title":"Parameters","id":"parameters"},{"title":"Storage Access","id":"storage-access"},{"title":"Authentication","id":"authentication"},{"title":"Player Communication","id":"player-communication"},{"title":"Player Management","id":"player-management"},{"title":"Logging","id":"logging"},{"title":"Complete Example","id":"complete-example"}],"/examples/chat":[{"title":"Complete Module","id":"complete-module"},{"title":"WebSocket Integration","id":"web-socket-integration"},{"title":"Usage Examples","id":"usage-examples"},{"title":"Key Features","id":"key-features"}],"/websockets":[{"title":"Socket Basics","id":"socket-basics"},{"title":"Message Structure","id":"message-structure"},{"title":"Authentication","id":"authentication"},{"title":"Real-time Updates","id":"real-time-updates"},{"title":"Client Implementation","id":"client-implementation"},{"title":"Socket State Management","id":"socket-state-management"},{"title":"Complete Example","id":"complete-example"}],"/quickstart":[{"title":"Choose your setup","id":"choose-your-setup"},{"title":"Creating your first module","id":"creating-your-first-module"},{"title":"What's next?","id":"whats-next"}],"/examples/basic-module":[{"title":"Complete Module","id":"complete-module"},{"title":"Module Breakdown","id":"module-breakdown"},{"title":"Usage Examples","id":"usage-examples"},{"title":"Key Concepts Demonstrated","id":"key-concepts-demonstrated"}],"/examples/economy":[{"title":"Complete Module","id":"complete-module"},{"title":"Key Features","id":"key-features"},{"title":"Usage Examples","id":"usage-examples"},{"title":"Key Concepts","id":"key-concepts"},{"title":"Common Patterns","id":"common-patterns"},{"title":"Extension Ideas","id":"extension-ideas"}],"/examples/player-stats":[{"title":"Complete Module","id":"complete-module"},{"title":"Stats Tracking","id":"stats-tracking"},{"title":"Usage","id":"usage"},{"title":"Event Handling","id":"event-handling"},{"title":"Web Integration","id":"web-integration"},{"title":"Key Features","id":"key-features"}]},"children":["$","$L11",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L12",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"absolute inset-0 -z-10 mx-0 max-w-none overflow-hidden","children":["$","div",null,{"className":"absolute left-1/2 top-0 ml-[-38rem] h-[25rem] w-[81.25rem] dark:[mask-image:linear-gradient(white,transparent)]","children":[["$","div",null,{"className":"absolute inset-0 bg-gradient-to-r from-[#fff] to-[#fff] opacity-40 [mask-image:radial-gradient(farthest-side_at_top,white,transparent)] dark:from-[#000]/30 dark:to-[#000]/30 dark:opacity-100","children":["$","svg",null,{"aria-hidden":"true","className":"absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5","children":[["$","defs",null,{"children":["$","pattern",null,{"id":":S1:","width":72,"height":56,"patternUnits":"userSpaceOnUse","x":-12,"y":4,"children":["$","path",null,{"d":"M.5 56V.5H72","fill":"none"}]}]}],["$","rect",null,{"width":"100%","height":"100%","strokeWidth":0,"fill":"url(#:S1:)"}],["$","svg",null,{"x":-12,"y":4,"className":"overflow-visible","children":[["$","rect","4-3",{"strokeWidth":"0","width":73,"height":57,"x":288,"y":168}],["$","rect","2-1",{"strokeWidth":"0","width":73,"height":57,"x":144,"y":56}],["$","rect","7-3",{"strokeWidth":"0","width":73,"height":57,"x":504,"y":168}],["$","rect","10-6",{"strokeWidth":"0","width":73,"height":57,"x":720,"y":336}]]}]]}]}],["$","svg",null,{"viewBox":"0 0 1113 440","aria-hidden":"true","className":"absolute left-1/2 top-0 ml-[-19rem] w-[69.5625rem] fill-white blur-[26px] dark:hidden","children":["$","path",null,{"d":"M.016 439.5s-9.5-300 434-300S882.516 20 882.516 20V0h230.004v439.5H.016Z"}]}]]}]}],["$","div",null,{"className":"mx-auto flex h-full max-w-xl flex-col items-center justify-center py-16 text-center","children":[["$","p",null,{"className":" text-5xl font-semibold text-zinc-900 dark:text-white","children":"404"}],["$","h1",null,{"className":"mt-2 text-2xl font-bold text-zinc-900 dark:text-white","children":"Page not found"}],["$","p",null,{"className":"mt-2 text-base text-zinc-600 dark:text-zinc-400","children":"Sorry, we couldn’t find the page you’re looking for."}],["$","$Lf",null,{"className":"inline-flex gap-0.5 justify-center overflow-hidden text-sm font-medium transition rounded-sm bg-zinc-900 py-1 px-3 text-white hover:bg-zinc-700 dark:bg-fuchsia-400/10 dark:text-fuchsia-400 dark:ring-1 dark:ring-inset dark:ring-fuchsia-400/20 dark:hover:bg-fuchsia-400/10 dark:hover:text-fuchsia-300 dark:hover:ring-fuchsia-300 mt-8","href":"/","children":[false,"Back to docs",["$","svg",null,{"viewBox":"0 0 20 20","fill":"none","aria-hidden":"true","className":"mt-0.5 h-5 w-5 -mr-1","children":["$","path",null,{"stroke":"currentColor","strokeLinecap":"round","strokeLinejoin":"round","d":"m11.5 6.5 3 3.5m0 0-3 3.5m3-3.5h-9"}]}]]}]]}]],"notFoundStyles":[],"styles":null}]}]}]}]}]}]
