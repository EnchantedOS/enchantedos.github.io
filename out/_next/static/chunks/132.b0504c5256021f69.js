(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[132],{5789:function(){},2120:function(e,t,o){"use strict";o.r(t),o.d(t,{search:function(){return a}});let n=new(o(3455)).Z.Document({tokenize:"full",document:{id:"url",index:"content",store:["title","pageTitle"]},context:{resolution:9,depth:2,bidirectional:!0}});for(let{url:e,sections:t}of[{url:"/",sections:[["What is Enchanted? ","what-is-enchanted",["Enchanted brings modern development practices to Minecraft server development, combining the power of TypeScript, Deno, and real-time WebSocket communication. ","The framework consists of three main components:","Denorite Server: A high-performance WebSocket server for real-time communication","Fabric Plugin: Seamless Minecraft server integration through a modern mod","Web Operating System: Intuitive Vue.js-based interface for server management"]],["Key Features ","key-features",["Modern Development","Build your server enhancement modules using TypeScript with hot-reloading support for rapid development. ","Real-Time Communication","Experience instant interactions with your Minecraft server through our WebSocket-based event system. ","Modular Architecture","Create encapsulated functionality using our decorator-based module system and event-driven design. "]],["Quick Example ","quick-example",[]],["Getting Started ","getting-started",["Ready to enhance your Minecraft server? Follow these steps: ","Install Enchanted - Set up the framework","Create your first module - Build something awesome","Learn the concepts - Master the framework","Explore examples - Get inspired"]],["System Requirements ","system-requirements",["Before you begin, ensure you have: ","Deno 2.0 or higher","Minecraft server with Fabric mod loader","TypeScript development environment","Node.js 18+ (for Web OS)"]]]},{url:"/architecture",sections:[["Architecture",null,["Discover how Enchanted's components work together to provide a powerful and flexible Minecraft server enhancement framework. "]],["System Overview","system-overview",["Enchanted consists of three main components that work together to enhance your Minecraft server:"]],["Real-Time Communication","real-time-communication",["The WebSocket server enables instantaneous communication between your Minecraft server and Enchanted modules, with events flowing in real-time through the system.","The communication flow works as follows:"]],["Module System","module-system",["Modules in Enchanted are TypeScript classes that use decorators to define their behavior:"]],["State Management","state-management",["Enchanted uses Deno KV for persistent storage across the system:"]],["Server Components","server-components",["WebSocket Server","Handles real-time communication with Minecraft server","Manages module events and responses","Provides authentication and security","Module Manager","Loads and initializes modules","Manages module lifecycle","Handles hot-reloading during development","Event Dispatcher","Routes events to appropriate modules","Manages event priorities and order","Handles error cases and fallbacks"]],["Fabric Plugin Integration","fabric-plugin-integration",["The Fabric plugin provides seamless integration with Minecraft:"]],["Security Model","security-model",["Enchanted implements multiple layers of security:"]],["Data Flow","data-flow",["The typical data flow in an Enchanted system:"]],["Performance Considerations","performance-considerations",["Enchanted is designed to handle high-throughput scenarios while maintaining low latency for real-time operations.","Key performance features:","Asynchronous event processing","Connection pooling","Request batching","Efficient state management","Resource limits per container"]],["Development Workflow","development-workflow",["The typical development workflow in Enchanted:","Learn more about Modules"]]]},{url:"/authentication",sections:[["Authentication",null,["Enchanted uses JWT tokens for authentication and permission management. This guide shows how to implement a basic authentication module for your server. ","While Enchanted handles token verification internally, you need to implement token generation and management through a module. Here's a minimal example to get you started."]],["Basic Auth Module","basic-auth-module",["Here's a minimal authentication module implementation:"]],["Client Usage","client-usage",["To authenticate from a client:"]],["Permission Levels","permission-levels",["Enchanted supports two primary permission levels:","Only use permission level 4 (operator) for administrative accounts. Regular players should always use level 1."]],["Token Structure","token-structure",["When creating tokens, include these essential fields:"]],["Secure Storage","secure-storage",["Store user data securely in the KV store:"]],["Security Best Practices","security-best-practices",["When implementing authentication:"]],["Enhanced Implementation","enhanced-implementation",["For production use, enhance the basic module with these features:"]],["What's next?","whats-next",["After implementing authentication:","Add password reset functionality","Implement session management","Add two-factor authentication","Create user management commands","Add role-based permissions","Learn more about Modules"]]]},{url:"/commands",sections:[["Commands",null,["Commands allow players to interact with your modules through Minecraft's chat interface. "]],["Command Basics","command-basics",["Register commands using the @Command decorator:"]],["Command Arguments","command-arguments",["Define command arguments using the @Argument decorator:"]],["Subcommands","subcommands",["Organize complex commands using subcommands:"]],["Command Responses","command-responses",["Create rich command responses using Minecraft's JSON text format:"]],["Command Permissions","command-permissions",["Control command access using the @Permission decorator:"]],["Command Error Handling","command-error-handling",["Handle command errors gracefully:"]],["Complete Example","complete-example",["Here's a comprehensive command module example:","Learn about Modules"]]]},{url:"/decorators",sections:[["Decorators",null,["Decorators are the building blocks of Enchanted modules, used to define module properties, handle events, create commands, and manage WebSocket communications. "]],["Module Decorator","module-decorator",["The @Module decorator defines a module's metadata:","The module name must be unique across your server, and the version should follow semantic versioning (MAJOR.MINOR.PATCH)."]],["Event Decorator","event-decorator",["The @Event decorator registers event handlers:"]],["Command Decorator","command-decorator",["The @Command decorator creates Minecraft commands:"]],["Description Decorator","description-decorator",["The @Description decorator adds help text to commands:"]],["Permission Decorator","permission-decorator",["The @Permission decorator controls access to commands:"]],["Argument Decorator","argument-decorator",["The @Argument decorator defines command arguments:"]],["Socket Decorator","socket-decorator",["The @Socket decorator handles WebSocket messages:"]],["Decorator Combinations","decorator-combinations",["Common decorator combinations:"]],["Complete Example","complete-example",["Here's a comprehensive example showing various decorator usages:"]],["Argument Types","argument-types",["Available argument types for the @Argument decorator:"]],["Permission Levels","permission-levels",["Available permission levels for the @Permission decorator:","Learn about Modules"]]]},{url:"/development",sections:[["Development",null,["Learn how to efficiently develop and test modules for your Enchanted server. "]],["Development Environment","development-environment",["First, set up your development environment:","The development server automatically reloads your modules when changes are detected in the modules/ directory."]],["Project Structure","project-structure",["Organize your Enchanted project following this structure:"]],["Module Development","module-development",["Create new modules using TypeScript decorators:"]],["Development Server","development-server",["The development server provides hot-reload capabilities:"]],["Testing Modules","testing-modules",["Test your modules during development:"]],["Development Tools","development-tools",["Essential tools for Enchanted development:"]],["Debugging","debugging",["Debug your modules effectively:"]],["Development Configuration","development-configuration",["Configure your development environment:"]],["Working with Docker","working-with-docker",["Develop using Docker:"]],["Module Hot Reloading","module-hot-reloading",["Modules are automatically reloaded when changes are detected:"]],["Common Development Tasks","common-development-tasks",["Here are some common development tasks:"]],["Best Practices","best-practices",["Follow these development best practices:"]],["Module Development Lifecycle","module-development-lifecycle",["Typical module development workflow:"]],["Example Development Module","example-development-module",["Here's a well-structured development module:","Learn more about Modules"]]]},{url:"/errors",sections:[["Error Handling",null,["Learn how to handle errors gracefully in your Enchanted modules to provide a better user experience and maintain server stability. "]],["Core Concepts","core-concepts",["Enchanted provides several ways to handle errors in different contexts:"]],["Command Error Handling","command-error-handling",["Handle command errors with proper user feedback:"]],["Socket Error Handling","socket-error-handling",["Handle WebSocket communication errors consistently:"]],["Event Error Handling","event-error-handling",["Handle event processing errors safely:"]],["Storage Error Handling","storage-error-handling",["Handle KV storage operations safely:"]],["Error Types","error-types",["Common error scenarios to handle:"]],["Best Practices","best-practices",["Follow these guidelines for robust error handling:"]],["Complete Example","complete-example",["Here's a module demonstrating comprehensive error handling:","Learn more about Modules"]]]},{url:"/events",sections:[["Events",null,["Events allow your modules to respond to actions happening on your Minecraft server in real-time. "]],["Event Basics","event-basics",["Use the @Event decorator to handle Minecraft server events:"]],["Player Events","player-events",["Events related to player actions:"]],["Block Events","block-events",["Events related to block interactions:"]],["Combat Events","combat-events",["Events related to combat and damage:"]],["Container Events","container-events",["Events for container interactions:"]],["Server Events","server-events",["Events related to server state:"]],["Event Handler Patterns","event-handler-patterns",["Common patterns for event handlers:"]],["Complete Example","complete-example",["Here's a comprehensive example showing various event handlers:","Learn about Modules"]]]},{url:"/installation",sections:[["Installation",null,["Get started with Enchanted by setting up the server environment using Docker Compose and Deno. This guide covers everything from initial setup to configuration and verification. ","Enchanted requires Deno 1.41 or higher and Docker with Compose support. The server itself is designed to work alongside Minecraft 1.20.1+ with Fabric mod loader."]],["Prerequisites","prerequisites",["Before installing Enchanted, you'll need:","Deno 1.41 or higher","Docker Engine with Compose support","Minecraft Server (Java Edition 1.20.1+) with Fabric mod loader"]],["Environment Setup","environment-setup",["First, create a .env file in your project root with the required configuration:","Make sure to replace all secret values with secure, randomly generated strings. Never commit your .env file to version control."]],["Docker Compose Configuration","docker-compose-configuration",["Create a docker-compose.yaml file to set up the Enchanted services:"]],["Project Configuration","project-configuration",["Create a deno.json file for your development environment:"]],["Project Structure","project-structure",["Your project should follow this structure:"]],["Starting the Server","starting-the-server",[]],["Verifying Your Installation","verifying-your-installation",["To verify your installation is working correctly:","Check if the KV service is running:","Verify the server container is running:","Check server logs for module registration:","Confirm ports 8081 and 8082 are accessible from your host machine."]],["Development Commands","development-commands",["The following commands are available through Deno:"]],["Troubleshooting Common Issues","troubleshooting-common-issues",["KV Connection Failed","If you're having issues connecting to the KV service:","Verify your DENO_KV_ACCESS_TOKEN matches in both the .env file and your configuration","Check if the KV container is running using docker-compose ps","Inspect the KV container logs with docker-compose logs kv","Module Hot Reload Not Working","For hot reload issues:","Ensure you're using deno task dev","Check that your file structure matches the expected layout","Verify the --watch flag includes your module directory","Permission Errors","For permission-related problems:","Run Deno with the -A flag for all permissions","Check container volume permissions","Verify your user has proper Docker access","Continue to Quickstart Guide"]]]},{url:"/minecraft-api",sections:[["Minecraft API",null,["The Minecraft API provides methods to interact with your Minecraft server directly from your modules. "]],["Basic Commands","basic-commands",["Execute basic Minecraft commands:"]],["Player Management","player-management",["Methods for managing players:"]],["World Manipulation","world-manipulation",["Methods for manipulating the world:"]],["Scoreboard Management","scoreboard-management",["Methods for managing scoreboards:"]],["Chat & Messages","chat-and-messages",["Methods for communication:"]],["Player Data","player-data",["Methods for accessing player data:"]],["Complete Example","complete-example",["Here's a comprehensive example using various API methods:","Learn about Modules"]]]},{url:"/modules",sections:[["Modules",null,["Modules are the foundation of Enchanted's functionality. Each module is a TypeScript class that can handle events, commands, and WebSocket messages. "]],["Basic Module Structure","basic-module-structure",["A basic Enchanted module looks like this:"]],["Module Context","module-context",["Every module method receives a ScriptContext object:"]],["Event Handling","event-handling",["Modules can listen to Minecraft server events:"]],["Command Registration","command-registration",["Create custom Minecraft commands:"]],["Socket Communication","socket-communication",["Handle real-time WebSocket messages:"]],["State Management","state-management",["Manage module state using Deno KV:"]],["Module Communication","module-communication",["Modules can communicate with each other:"]],["Module Lifecycle","module-lifecycle",["Understand how modules are loaded and managed:"]],["Complex Module Example","complex-module-example",["Here's a complete module example showing various features:","Learn about Events"]]]},{url:"/permissions",sections:[["Permissions",null,["Enchanted uses a simple but effective permission system based on roles and decorators to secure your modules. "]],["Permission Levels","permission-levels",["Enchanted implements three basic permission levels:"]],["Using Permissions","using-permissions",["Secure your module methods using the @Permission decorator:"]],["Permission Context","permission-context",["The ScriptContext provides authentication utilities through the auth object:"]],["Permission Checks","permission-checks",["Here are different ways to check permissions in your modules:"]],["Command Permissions","command-permissions",["Commands can specify required permission levels:"]],["Socket Handler Permissions","socket-handler-permissions",["Socket handlers require manual permission checks:"]],["Error Handling","error-handling",["Handle permission errors gracefully:"]],["Best Practices","best-practices",["When implementing permissions:"]],["Example Module","example-module",["Here's a complete example showing different permission patterns:","Learn more about Modules"]]]},{url:"/quickstart",sections:[["Quickstart",null,["This guide will get you all set up and ready to use Enchanted. We'll cover how to install the framework, create your first module, and enhance your Minecraft server with real-time features. We'll also look at where to go next to find all the information you need to take full advantage of our powerful framework. ","Before you can start using Enchanted, you need to have Deno 2.0+ installed and a Minecraft server running with the Fabric mod loader. Make sure you have the correct version of Minecraft for the Enchanted Fabric mod."]],["Choose your setup","choose-your-setup",["Before creating your first module, you need to set up the Enchanted environment. You can either start with our template project or set up everything manually. Below you'll see how to get started with each approach.","Check out our detailed installation guide"]],["Creating your first module","creating-your-first-module",["After setting up your environment, you're ready to create your first Enchanted module. Below, you can see how to create a simple welcome module that responds to player joins and adds a custom command.","Read the documentation for Modules"]],["What's next?","whats-next",["Great! You've set up your environment and created your first module. Here are a few links that might be handy as you continue exploring Enchanted:","Learn about the Event System","Explore the Command System","Understand Storage and State","Browse example modules","View the full Minecraft API reference","Ready to enhance your server further? Check out these common enhancements:","Create an Economy System","Add Custom Commands","Track Player Statistics","Enhance Chat Features"]]]},{url:"/script-context",sections:[["Script Context",null,["The ScriptContext object is passed to every module method, providing access to essential APIs and utilities. "]],["Context Structure","context-structure",["The ScriptContext interface provides various tools and utilities:"]],["Parameters","parameters",["The params object contains event-specific data:"]],["Storage Access","storage-access",["The kv property provides access to Deno KV storage:"]],["Authentication","authentication",["The auth property provides authentication utilities:"]],["Player Communication","player-communication",["Methods for communicating with players:"]],["Player Management","player-management",["Player-related utilities:"]],["Logging","logging",["The log function for debugging and monitoring:"]],["Complete Example","complete-example",["Here's a comprehensive example using various ScriptContext features:","Learn about Modules"]]]},{url:"/storage",sections:[["Storage",null,["Enchanted uses Deno KV for persistent data storage, providing a powerful key-value store with atomic operations. "]],["Basic Operations","basic-operations",["Basic key-value operations in your modules:"]],["Key Structure","key-structure",["Use descriptive, hierarchical keys for better organization:","Use array-based keys for better type safety and to avoid encoding issues. Keys are automatically encoded and decoded by Deno KV."]],["Atomic Operations","atomic-operations",["Perform atomic operations to ensure data consistency:"]],["Data Models","data-models",["Define clear interfaces for your stored data:"]],["Data Management Patterns","data-management-patterns",["Common patterns for managing stored data:"]],["Complete Example","complete-example",["Here's a comprehensive example showing various storage patterns:","Learn about Modules"]]]},{url:"/types",sections:[["Types",null,["Understanding the type system is crucial for developing type-safe Enchanted modules. "]],["Core Types","core-types",["Essential types used throughout Enchanted:"]],["Authentication Types","authentication-types",["Types related to authentication and permissions:"]],["Decorator Types","decorator-types",["Types used in module decorators:"]],["API Types","api-types",["Types for the Minecraft API interface:"]],["Event Types","event-types",["Types for different event data structures:"]],["Storage Types","storage-types",["Types for working with Deno KV:"]],["WebSocket Types","web-socket-types",["Types for WebSocket communication:"]],["Utility Types","utility-types",["Common utility types used across modules:"]],["Type Usage Example","type-usage-example",["Here's how to use these types in a module:","Learn about Modules"]]]},{url:"/utilities",sections:[["Utilities",null,["Enchanted provides various utility functions to simplify common tasks in your modules. "]],["Rate Limiting","rate-limiting",["Utilities for managing request rates:"]],["Message Formatting","message-formatting",["Helper functions for formatting messages:"]],["Time Utilities","time-utilities",["Functions for handling time and durations:"]],["Data Validation","data-validation",["Helper functions for validating data:"]],["Promise Utilities","promise-utilities",["Helpers for working with async operations:"]],["Collection Utilities","collection-utilities",["Helpers for working with collections:"]],["Complete Example","complete-example",["Here's a module using various utilities:","Learn about Modules"]]]},{url:"/websockets",sections:[["WebSockets",null,["WebSockets enable real-time bidirectional communication between your Minecraft server and connected clients. "]],["Socket Basics","socket-basics",["Handle WebSocket messages using the @Socket decorator:"]],["Message Structure","message-structure",["Standard message format for WebSocket communication:"]],["Authentication","authentication",["Handle authentication in WebSocket connections:"]],["Real-time Updates","real-time-updates",["Send real-time updates to connected clients:"]],["Client Implementation","client-implementation",["Example client-side WebSocket implementation:"]],["Socket State Management","socket-state-management",["Handle socket state and reconnection:"]],["Complete Example","complete-example",["Here's a comprehensive WebSocket module example:","Learn about Modules"]]]},{url:"/examples/basic-module",sections:[["Basic Module Example",null,["Let's create a basic welcome module that demonstrates core Enchanted features including events, commands, storage, and socket communication. "]],["Complete Module","complete-module",["Here's a basic welcome module that showcases common patterns:"]],["Module Breakdown","module-breakdown",["Let's examine each part of the module:","Data Interfaces","First, we define our data structures:","Event Handling","The module responds to player joins:","Commands","We provide player and admin commands:","Storage","The module uses Deno KV for persistent storage:","Socket Communication","We provide a WebSocket endpoint for stats:"]],["Usage Examples","usage-examples",["Here's how to use the module:"]],["Key Concepts Demonstrated","key-concepts-demonstrated",["This basic module shows several important patterns:","Decorator Usage","@Module for module definition","@Event for event handling","@Command for commands","@Permission for access control","@Socket for WebSocket communication","Data Management","Interface definitions","Storage operations","Atomic updates","Error Handling","Try-catch blocks","Error responses","Logging","User Communication","Chat messages","Command responses","WebSocket responses","Authentication","Permission checking","Role-based access","View Economy Module Example"]]]},{url:"/examples/chat",sections:[["Chat Enhancement Module",null,["Add web client integration to Minecraft chat through WebSocket communication. ","This module allows web clients to receive and send chat messages through WebSocket connections while maintaining Minecraft's base chat functionality."]],["Complete Module","complete-module",[]],["WebSocket Integration","web-socket-integration",["Message Format","Messages exchanged between the server and web clients:","Web Client Implementation","Example web client implementation:"]],["Usage Examples","usage-examples",["How to use the chat system with web integration:"]],["Key Features","key-features",["Real-time Communication","Bidirectional chat between game and web","Message broadcasting","Chat history","Message Types","Regular chat messages","Announcements","System messages","Authentication","Token-based auth","Permission checks","Secure messaging","Message Storage","Recent message history","Message persistence","Chat logs","View Player Stats Example"]]]},{url:"/examples/economy",sections:[["Economy System",null,["Create a full-featured economy system with transactions, shops, and banking features. "]],["Complete Module","complete-module",["Here's a comprehensive economy module:"]],["Key Features","key-features",["Account Management","Handles player accounts with balances and transaction history:","Shop System","Implements a full shop system with stock management:","Player Commands","Basic economy commands for players:","Admin Commands","Administrative commands for economy management:","WebSocket Integration","Real-time account information:"]],["Usage Examples","usage-examples",["Here's how to use the economy system:"]],["Key Concepts","key-concepts",["Atomic Transactions","Uses kv.atomic() for safe money transfers","Prevents race conditions in shop purchases","Ensures data consistency","Transaction History","Tracks all money movements","Limited to last 50 transactions","Includes timestamps and descriptions","Shop System Integration","Manages item stock","Handles concurrent purchases","Integrates with Minecraft inventory","Interactive Commands","Clickable shop items","Hover descriptions","Clear feedback messages","Event Integration","Death penalties","Achievement rewards","Activity bonuses"]],["Common Patterns","common-patterns",["Here are some useful patterns demonstrated in this module:","1. Safe Money Operations","Always use atomic operations for balance changes:","2. Transaction Logging","Always log transactions for accountability:","3. User Feedback","Provide clear feedback for all operations:","4. Input Validation","Validate all inputs before processing:"]],["Extension Ideas","extension-ideas",["Ways to extend this economy system:","Banking System","Interest rates","Loans","Joint accounts","Market System","Player shops","Auctions","Trading","Job System","Salary payments","Task rewards","Career progression","Economy Events","Market crashes","Sales events","Lucky bonuses","View Chat System Example"]]]},{url:"/examples/player-stats",sections:[["Player Statistics",null,["Track player metrics and provide both in-game and web-based statistics viewing. "]],["Complete Module","complete-module",[]],["Stats Tracking","stats-tracking",["The module tracks various statistics:"]],["Usage","usage",["View stats in-game or via WebSocket:"]],["Event Handling","event-handling",["The module tracks various events:"]],["Web Integration","web-integration",["Access stats through WebSocket endpoints:"]],["Key Features","key-features",["Comprehensive Tracking","Playtime","Combat stats","Block interaction","Session tracking","Real-time Updates","Event-based tracking","Automatic updates","Session management","Data Access","In-game commands","WebSocket API","Leaderboards","Performance","Efficient storage","Atomic updates","Event batching","View Economy System Example"]]]}])for(let[o,a,s]of t)n.add({url:e+(a?"#"+a:""),title:o,content:[o,...s].join("\n"),pageTitle:a?t[0][0]:void 0});function a(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=n.search(e,{...t,enrich:!0});return 0===o.length?[]:o[0].result.map(e=>({url:e.id,title:e.doc.title,pageTitle:e.doc.pageTitle}))}}}]);